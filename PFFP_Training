{"metadata":{"colab":{"provenance":[],"gpuType":"V28"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"TPU","kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":9276350,"sourceType":"datasetVersion","datasetId":5614375}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mdrejwanurrahman/training-pffp?scriptVersionId=195142444\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Installing libraries\n\nKaggle has most of the packages pre-installed. But imblearn and openpyxl may need to be installed manually. ","metadata":{}},{"cell_type":"code","source":"!pip install imblearn","metadata":{"id":"EZDCBuiJ814Y","outputId":"6cdc3969-9131-4a0c-fe4a-78b2eee42b37","execution":{"iopub.status.busy":"2024-09-03T09:07:21.860251Z","iopub.execute_input":"2024-09-03T09:07:21.860666Z","iopub.status.idle":"2024-09-03T09:07:26.777907Z","shell.execute_reply.started":"2024-09-03T09:07:21.860639Z","shell.execute_reply":"2024-09-03T09:07:26.776885Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting imblearn\n  Downloading imblearn-0.0-py2.py3-none-any.whl (1.9 kB)\nCollecting imbalanced-learn\n  Downloading imbalanced_learn-0.12.3-py3-none-any.whl (258 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m258.3/258.3 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.4.2)\nRequirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.5.1)\nRequirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.14.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (3.5.0)\nRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.26.4)\nInstalling collected packages: imbalanced-learn, imblearn\nSuccessfully installed imbalanced-learn-0.12.3 imblearn-0.0\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install openpyxl","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:07:26.779556Z","iopub.execute_input":"2024-09-03T09:07:26.779803Z","iopub.status.idle":"2024-09-03T09:07:30.993455Z","shell.execute_reply.started":"2024-09-03T09:07:26.779777Z","shell.execute_reply":"2024-09-03T09:07:30.992423Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting openpyxl\n  Downloading openpyxl-3.1.5-py2.py3-none-any.whl (250 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m250.9/250.9 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hCollecting et-xmlfile\n  Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\nInstalling collected packages: et-xmlfile, openpyxl\nSuccessfully installed et-xmlfile-1.1.0 openpyxl-3.1.5\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Import Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv1D, Flatten\nfrom keras.utils import plot_model\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom imblearn.over_sampling import ADASYN\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport joblib\nimport tensorflow as tf\nimport tensorflow_probability as tfp","metadata":{"id":"KfBmDYp6gmKP","outputId":"21a061ec-f032-4c76-eb76-833de4a74d9a","execution":{"iopub.status.busy":"2024-09-03T09:07:30.994698Z","iopub.execute_input":"2024-09-03T09:07:30.994978Z","iopub.status.idle":"2024-09-03T09:07:51.399814Z","shell.execute_reply.started":"2024-09-03T09:07:30.994947Z","shell.execute_reply":"2024-09-03T09:07:51.39899Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"WARNING: Logging before InitGoogle() is written to STDERR\nE0000 00:00:1725354462.404014      13 common_lib.cc:798] Could not set metric server port: INVALID_ARGUMENT: Could not find SliceBuilder port 8471 in any of the 0 ports provided in `tpu_process_addresses`=\"local\"\n=== Source Location Trace: ===\nlearning/45eac/tfrc/runtime/common_lib.cc:479\nD0903 09:07:42.412427335      13 config.cc:196]                        gRPC EXPERIMENT call_status_override_on_cancellation   OFF (default:OFF)\nD0903 09:07:42.412441732      13 config.cc:196]                        gRPC EXPERIMENT call_v3                                OFF (default:OFF)\nD0903 09:07:42.412444977      13 config.cc:196]                        gRPC EXPERIMENT canary_client_privacy                  ON  (default:ON)\nD0903 09:07:42.412447448      13 config.cc:196]                        gRPC EXPERIMENT capture_base_context                   ON  (default:ON)\nD0903 09:07:42.412450212      13 config.cc:196]                        gRPC EXPERIMENT client_idleness                        ON  (default:ON)\nD0903 09:07:42.412452597      13 config.cc:196]                        gRPC EXPERIMENT client_privacy                         ON  (default:ON)\nD0903 09:07:42.412454919      13 config.cc:196]                        gRPC EXPERIMENT dapper_request_wire_size               OFF (default:OFF)\nD0903 09:07:42.412457116      13 config.cc:196]                        gRPC EXPERIMENT empty_experiment                       OFF (default:OFF)\nD0903 09:07:42.412459302      13 config.cc:196]                        gRPC EXPERIMENT event_engine_client                    OFF (default:OFF)\nD0903 09:07:42.412461464      13 config.cc:196]                        gRPC EXPERIMENT event_engine_dns                       ON  (default:ON)\nD0903 09:07:42.412463680      13 config.cc:196]                        gRPC EXPERIMENT event_engine_listener                  ON  (default:ON)\nD0903 09:07:42.412466002      13 config.cc:196]                        gRPC EXPERIMENT free_large_allocator                   OFF (default:OFF)\nD0903 09:07:42.412468190      13 config.cc:196]                        gRPC EXPERIMENT google_no_envelope_resolver            OFF (default:OFF)\nD0903 09:07:42.412470387      13 config.cc:196]                        gRPC EXPERIMENT http2_stats_fix                        OFF (default:OFF)\nD0903 09:07:42.412472584      13 config.cc:196]                        gRPC EXPERIMENT keepalive_fix                          OFF (default:OFF)\nD0903 09:07:42.412474775      13 config.cc:196]                        gRPC EXPERIMENT keepalive_server_fix                   ON  (default:ON)\nD0903 09:07:42.412477111      13 config.cc:196]                        gRPC EXPERIMENT loas_do_not_prefer_rekey_next_protocol OFF (default:OFF)\nD0903 09:07:42.412479367      13 config.cc:196]                        gRPC EXPERIMENT loas_prod_to_cloud_prefer_pfs_ciphers  OFF (default:OFF)\nD0903 09:07:42.412481604      13 config.cc:196]                        gRPC EXPERIMENT monitoring_experiment                  ON  (default:ON)\nD0903 09:07:42.412483834      13 config.cc:196]                        gRPC EXPERIMENT multiping                              OFF (default:OFF)\nD0903 09:07:42.412486039      13 config.cc:196]                        gRPC EXPERIMENT peer_state_based_framing               OFF (default:OFF)\nD0903 09:07:42.412488267      13 config.cc:196]                        gRPC EXPERIMENT pending_queue_cap                      ON  (default:ON)\nD0903 09:07:42.412490560      13 config.cc:196]                        gRPC EXPERIMENT pick_first_happy_eyeballs              ON  (default:ON)\nD0903 09:07:42.412492795      13 config.cc:196]                        gRPC EXPERIMENT promise_based_client_call              OFF (default:OFF)\nD0903 09:07:42.412494914      13 config.cc:196]                        gRPC EXPERIMENT promise_based_inproc_transport         OFF (default:OFF)\nD0903 09:07:42.412497061      13 config.cc:196]                        gRPC EXPERIMENT promise_based_server_call              OFF (default:OFF)\nD0903 09:07:42.412499312      13 config.cc:196]                        gRPC EXPERIMENT registered_method_lookup_in_transport  ON  (default:ON)\nD0903 09:07:42.412501541      13 config.cc:196]                        gRPC EXPERIMENT rfc_max_concurrent_streams             ON  (default:ON)\nD0903 09:07:42.412503893      13 config.cc:196]                        gRPC EXPERIMENT round_robin_delegate_to_pick_first     ON  (default:ON)\nD0903 09:07:42.412507147      13 config.cc:196]                        gRPC EXPERIMENT rstpit                                 OFF (default:OFF)\nD0903 09:07:42.412509574      13 config.cc:196]                        gRPC EXPERIMENT schedule_cancellation_over_write       OFF (default:OFF)\nD0903 09:07:42.412511906      13 config.cc:196]                        gRPC EXPERIMENT server_privacy                         ON  (default:ON)\nD0903 09:07:42.412514277      13 config.cc:196]                        gRPC EXPERIMENT tcp_frame_size_tuning                  OFF (default:OFF)\nD0903 09:07:42.412516559      13 config.cc:196]                        gRPC EXPERIMENT tcp_rcv_lowat                          OFF (default:OFF)\nD0903 09:07:42.412518772      13 config.cc:196]                        gRPC EXPERIMENT trace_record_callops                   OFF (default:OFF)\nD0903 09:07:42.412520982      13 config.cc:196]                        gRPC EXPERIMENT unconstrained_max_quota_buffer_size    OFF (default:OFF)\nD0903 09:07:42.412523289      13 config.cc:196]                        gRPC EXPERIMENT v3_backend_metric_filter               OFF (default:OFF)\nD0903 09:07:42.412525458      13 config.cc:196]                        gRPC EXPERIMENT v3_channel_idle_filters                ON  (default:ON)\nD0903 09:07:42.412527683      13 config.cc:196]                        gRPC EXPERIMENT v3_compression_filter                  ON  (default:ON)\nD0903 09:07:42.412529879      13 config.cc:196]                        gRPC EXPERIMENT v3_server_auth_filter                  OFF (default:OFF)\nD0903 09:07:42.412532040      13 config.cc:196]                        gRPC EXPERIMENT work_serializer_clears_time_cache      OFF (default:OFF)\nD0903 09:07:42.412534195      13 config.cc:196]                        gRPC EXPERIMENT work_serializer_dispatch               OFF (default:OFF)\nD0903 09:07:42.412536382      13 config.cc:196]                        gRPC EXPERIMENT write_size_cap                         ON  (default:ON)\nD0903 09:07:42.412538615      13 config.cc:196]                        gRPC EXPERIMENT write_size_policy                      ON  (default:ON)\nD0903 09:07:42.412540826      13 config.cc:196]                        gRPC EXPERIMENT wrr_delegate_to_pick_first             ON  (default:ON)\nI0903 09:07:42.412707773      13 ev_epoll1_linux.cc:123]               grpc epoll fd: 60\nD0903 09:07:42.412719844      13 ev_posix.cc:113]                      Using polling engine: epoll1\nD0903 09:07:42.422865656      13 lb_policy_registry.cc:46]             registering LB policy factory for \"priority_experimental\"\nD0903 09:07:42.422875873      13 lb_policy_registry.cc:46]             registering LB policy factory for \"outlier_detection_experimental\"\nD0903 09:07:42.422883673      13 lb_policy_registry.cc:46]             registering LB policy factory for \"weighted_target_experimental\"\nD0903 09:07:42.422886906      13 lb_policy_registry.cc:46]             registering LB policy factory for \"pick_first\"\nD0903 09:07:42.422889760      13 lb_policy_registry.cc:46]             registering LB policy factory for \"round_robin\"\nD0903 09:07:42.422892617      13 lb_policy_registry.cc:46]             registering LB policy factory for \"weighted_round_robin\"\nD0903 09:07:42.422922371      13 lb_policy_registry.cc:46]             registering LB policy factory for \"grpclb\"\nD0903 09:07:42.422936749      13 dns_resolver_plugin.cc:43]            Using EventEngine dns resolver\nD0903 09:07:42.422952441      13 lb_policy_registry.cc:46]             registering LB policy factory for \"rls_experimental\"\nD0903 09:07:42.422975938      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_cluster_manager_experimental\"\nD0903 09:07:42.422983066      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_cluster_impl_experimental\"\nD0903 09:07:42.422986326      13 lb_policy_registry.cc:46]             registering LB policy factory for \"cds_experimental\"\nD0903 09:07:42.422990410      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_override_host_experimental\"\nD0903 09:07:42.422993534      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_wrr_locality_experimental\"\nD0903 09:07:42.422996476      13 lb_policy_registry.cc:46]             registering LB policy factory for \"ring_hash_experimental\"\nD0903 09:07:42.422999836      13 certificate_provider_registry.cc:33]  registering certificate provider factory for \"file_watcher\"\nD0903 09:07:42.423028572      13 channel_init.cc:157]                  Filter server-auth not registered, but is referenced in the after clause of grpc-server-authz when building channel stack SERVER_CHANNEL\nI0903 09:07:42.424733982      13 ev_epoll1_linux.cc:359]               grpc epoll fd: 62\nI0903 09:07:42.445031963      13 tcp_socket_utils.cc:689]              Disabling AF_INET6 sockets because ::1 is not available.\nI0903 09:07:42.448355443     182 socket_utils_common_posix.cc:452]     Disabling AF_INET6 sockets because ::1 is not available.\nI0903 09:07:42.448403355     182 socket_utils_common_posix.cc:379]     TCP_USER_TIMEOUT is available. TCP_USER_TIMEOUT will be used thereafter\nE0903 09:07:42.455193593     177 oauth2_credentials.cc:238]            oauth_fetch: UNKNOWN:C-ares status is not ARES_SUCCESS qtype=A name=metadata.google.internal. is_balancer=0: Domain name not found {created_time:\"2024-09-03T09:07:42.455178281+00:00\", grpc_status:2}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Import Dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_excel('/kaggle/input/pffp-data/PFFP_Data.xlsx', sheet_name='RAW', header=None)\n","metadata":{"id":"d0vKrJUnhcUW","execution":{"iopub.status.busy":"2024-09-03T09:07:51.400991Z","iopub.execute_input":"2024-09-03T09:07:51.40176Z","iopub.status.idle":"2024-09-03T09:07:52.781518Z","shell.execute_reply.started":"2024-09-03T09:07:51.401713Z","shell.execute_reply":"2024-09-03T09:07:52.780756Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## Dividing Input and Output","metadata":{"id":"tNk3miXJiNmX"}},{"cell_type":"code","source":"\nX = df.iloc[:211]  # Selects the first 211 rows for X\nY = df.iloc[211:212] # Class labels\nV = df.iloc[212:213] # Impact Velocity\n\nXa= np.array(X) #Converting to numpy array\nVa= np.array(V) #Converting to numpy array\n\nNorm_X= 100*Xa/Va # Dividing deceleration values by impact velocity and 100 is multiplied for numerical stability\n","metadata":{"id":"RHvjwOnUifCZ","execution":{"iopub.status.busy":"2024-09-03T09:07:52.784183Z","iopub.execute_input":"2024-09-03T09:07:52.784639Z","iopub.status.idle":"2024-09-03T09:07:52.801636Z","shell.execute_reply.started":"2024-09-03T09:07:52.784588Z","shell.execute_reply":"2024-09-03T09:07:52.800899Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"## Scalling of the Input","metadata":{}},{"cell_type":"code","source":"# Flatten the array to 1D\nNorm_X_flattened = Norm_X.flatten()\n\n# Create a MinMaxScaler object with range [0, 1]\nscaler = MinMaxScaler(feature_range=(0, 1))\n\n# Fit and transform the flattened array\nNorm_X_scaled_flat = scaler.fit_transform(Norm_X_flattened.reshape(-1, 1))\n\n# Reshape back to the original shape (211, 447)\nNorm_X_scaled = Norm_X_scaled_flat.reshape(211, 447)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:08:38.093107Z","iopub.execute_input":"2024-09-03T09:08:38.093517Z","iopub.status.idle":"2024-09-03T09:08:38.112694Z","shell.execute_reply.started":"2024-09-03T09:08:38.093483Z","shell.execute_reply":"2024-09-03T09:08:38.11198Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"## Save Scaling Function for later use","metadata":{}},{"cell_type":"code","source":"scaler_filename = 'scaler_fit.joblib'\njoblib.dump(scaler, scaler_filename)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:08:38.114512Z","iopub.execute_input":"2024-09-03T09:08:38.115419Z","iopub.status.idle":"2024-09-03T09:08:38.130414Z","shell.execute_reply.started":"2024-09-03T09:08:38.115374Z","shell.execute_reply":"2024-09-03T09:08:38.129454Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"['scaler_fit.joblib']"},"metadata":{}}]},{"cell_type":"markdown","source":"## Encoding the Class Labels","metadata":{}},{"cell_type":"code","source":"# Convert the target variable to numeric labels \nYa= np.squeeze(np.array(Y))\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(Ya)","metadata":{"id":"bGsmIQHBises","execution":{"iopub.status.busy":"2024-09-03T09:08:38.131543Z","iopub.execute_input":"2024-09-03T09:08:38.131907Z","iopub.status.idle":"2024-09-03T09:08:38.136807Z","shell.execute_reply.started":"2024-09-03T09:08:38.131865Z","shell.execute_reply":"2024-09-03T09:08:38.135978Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"## Split data into training and testing sets\n","metadata":{}},{"cell_type":"code","source":"\nX_train, X_test, y_train, y_test = train_test_split(Norm_X_scaled.T, y, test_size=0.15,stratify=y, random_state=482)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:08:38.138029Z","iopub.execute_input":"2024-09-03T09:08:38.138852Z","iopub.status.idle":"2024-09-03T09:08:38.149837Z","shell.execute_reply.started":"2024-09-03T09:08:38.138794Z","shell.execute_reply":"2024-09-03T09:08:38.149034Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"## Train the Prior (Random Forest) Model","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n\npd_train = np.count_nonzero(X_train, axis=1)\nmax_dec_train = np.max(X_train, axis=1)\n\npd_test = np.count_nonzero(X_test, axis=1)\nmax_dec_test = np.max(X_test, axis=1)\n\nXRF_train= np.column_stack((max_dec_train,pd_train))\nXRF_test= np.column_stack((max_dec_test,pd_test))\n\n\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier\nclf.fit(XRF_train, y_train)\n\n# Predict probabilities for the test set\nclass_probs = clf.predict_proba(XRF_test)\n\n# 'class_probs' now contains the class probabilities for each sample in the test set\n\npredRF=np.argmax(class_probs,axis=1)\n","metadata":{"id":"EiDPH7ppTVUT","execution":{"iopub.status.busy":"2024-09-03T09:08:38.152933Z","iopub.execute_input":"2024-09-03T09:08:38.15354Z","iopub.status.idle":"2024-09-03T09:08:38.324468Z","shell.execute_reply.started":"2024-09-03T09:08:38.153508Z","shell.execute_reply":"2024-09-03T09:08:38.323731Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"## Save Random Forest Model for later use","metadata":{}},{"cell_type":"code","source":"model_filename = 'random_forest_model.joblib'\njoblib.dump(clf, model_filename)","metadata":{"id":"jeXWqBrFG3ed","outputId":"910e0514-b5bb-45a0-9860-6cde6e8fdeda","execution":{"iopub.status.busy":"2024-09-03T09:08:38.325464Z","iopub.execute_input":"2024-09-03T09:08:38.325815Z","iopub.status.idle":"2024-09-03T09:08:38.382759Z","shell.execute_reply.started":"2024-09-03T09:08:38.325775Z","shell.execute_reply":"2024-09-03T09:08:38.381909Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"['random_forest_model.joblib']"},"metadata":{}}]},{"cell_type":"markdown","source":"## Oversampling to create Balanced Dataset","metadata":{"id":"lIHdi39wosJN"}},{"cell_type":"code","source":"ada = ADASYN(random_state=50)\nX_train_balanced, y_train_balanced = ada.fit_resample(X_train, y_train)","metadata":{"id":"RnfMpiUOBrpj","execution":{"iopub.status.busy":"2024-09-03T09:08:39.032142Z","iopub.execute_input":"2024-09-03T09:08:39.032398Z","iopub.status.idle":"2024-09-03T09:08:39.195578Z","shell.execute_reply.started":"2024-09-03T09:08:39.032374Z","shell.execute_reply":"2024-09-03T09:08:39.19455Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# Reshaping to match with the format of training dataset\nX_test = np.reshape(X_test,[X_test.shape[0],X_test.shape[1],1])\n","metadata":{"id":"3nl8O7VSq1b_","execution":{"iopub.status.busy":"2024-09-03T09:08:39.196799Z","iopub.execute_input":"2024-09-03T09:08:39.197132Z","iopub.status.idle":"2024-09-03T09:08:39.201562Z","shell.execute_reply.started":"2024-09-03T09:08:39.197096Z","shell.execute_reply":"2024-09-03T09:08:39.20071Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"## One Hot Encoding","metadata":{"id":"QWvTfcxaweiF"}},{"cell_type":"code","source":"y_train_hot = to_categorical(y_train_balanced, num_classes=4)","metadata":{"id":"sGuW58yHMUyc","execution":{"iopub.status.busy":"2024-09-03T09:08:39.202578Z","iopub.execute_input":"2024-09-03T09:08:39.202885Z","iopub.status.idle":"2024-09-03T09:08:39.214165Z","shell.execute_reply.started":"2024-09-03T09:08:39.202851Z","shell.execute_reply":"2024-09-03T09:08:39.213461Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"## Bayesian Neural Network Architecture","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_probability as tfp\n\nseed = 42\nsanitized_seed = tfp.random.sanitize_seed(seed)\n\n# Define the kernel divergence function\ndef kernel_divergence_fn(q, p, _):\n    return tfp.distributions.kl_divergence(q, p) / float(X_train_balanced.shape[0])\n\n# Model building\nclass BayesianConv1DModel(tf.Module):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n        self.conv1 = tfp.layers.Convolution1DFlipout(32, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.conv2 = tfp.layers.Convolution1DFlipout(64, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.flatten = tf.keras.layers.Flatten()\n        self.dense1 = tfp.layers.DenseFlipout(1024, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense2 = tfp.layers.DenseFlipout(64, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense3 = tfp.layers.DenseFlipout(4, activation='softmax', kernel_divergence_fn=kernel_divergence_fn)\n\n    def __call__(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.flatten(x)\n        x = self.dense1(x)\n        x = self.dense2(x)\n        x = self.dense3(x)\n        return x\n\n# Instantiate the model\nmodel = BayesianConv1DModel()\n\n# Define loss function\ndef loss_fn(labels, predictions):\n    return tf.reduce_mean(tf.keras.losses.categorical_crossentropy(labels, predictions))\n\n# Define the training step\ndef train_step(model, inputs, labels, optimizer):\n    with tf.GradientTape() as tape:\n        predictions = model(inputs)\n        loss = loss_fn(labels, predictions)\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    return loss\n\n","metadata":{"id":"_r-1-g_pkBzX","outputId":"7863fd0b-d57d-4ec3-86ed-4eb0cf380b84","execution":{"iopub.status.busy":"2024-09-03T09:08:39.215181Z","iopub.execute_input":"2024-09-03T09:08:39.215472Z","iopub.status.idle":"2024-09-03T09:08:43.279408Z","shell.execute_reply.started":"2024-09-03T09:08:39.215444Z","shell.execute_reply":"2024-09-03T09:08:43.27844Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1725354523.232575      13 service.cc:145] XLA service 0x5be1ec51ce90 initialized for platform TPU (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1725354523.232631      13 service.cc:153]   StreamExecutor device (0): TPU, 2a886c8\nI0000 00:00:1725354523.232636      13 service.cc:153]   StreamExecutor device (1): TPU, 2a886c8\nI0000 00:00:1725354523.232639      13 service.cc:153]   StreamExecutor device (2): TPU, 2a886c8\nI0000 00:00:1725354523.232642      13 service.cc:153]   StreamExecutor device (3): TPU, 2a886c8\nI0000 00:00:1725354523.232644      13 service.cc:153]   StreamExecutor device (4): TPU, 2a886c8\nI0000 00:00:1725354523.232647      13 service.cc:153]   StreamExecutor device (5): TPU, 2a886c8\nI0000 00:00:1725354523.232650      13 service.cc:153]   StreamExecutor device (6): TPU, 2a886c8\nI0000 00:00:1725354523.232653      13 service.cc:153]   StreamExecutor device (7): TPU, 2a886c8\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Convert the training data to a TensorFlow Dataset\nX_train_balanced = np.reshape(X_train_balanced, (X_train_balanced.shape[0], 211, 1))\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices((X_train_balanced, y_train_hot))\n\n# Batch the dataset \ntrain_dataset = train_dataset.batch(32)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:08:43.286662Z","iopub.execute_input":"2024-09-03T09:08:43.286939Z","iopub.status.idle":"2024-09-03T09:08:43.306922Z","shell.execute_reply.started":"2024-09-03T09:08:43.286912Z","shell.execute_reply":"2024-09-03T09:08:43.306249Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"## BNN Model Training","metadata":{}},{"cell_type":"code","source":"\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\nepoch = 0\nloss = float('inf')  # Initialize loss with a large number\n\nwhile loss > 0.05:\n    for inputs, labels in train_dataset:\n        loss = train_step(model, inputs, labels, optimizer)\n    epoch += 1\n    print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")\n\n    # Optionally, include a break condition to avoid infinite loops\n    if epoch > 20:  # Example: Stop training after 1000 epochs if loss is not below 0.05\n        print(\"Stopping early after 20 epochs.\")\n        break","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:08:43.307775Z","iopub.execute_input":"2024-09-03T09:08:43.308018Z","iopub.status.idle":"2024-09-03T09:20:47.525284Z","shell.execute_reply.started":"2024-09-03T09:08:43.307982Z","shell.execute_reply":"2024-09-03T09:20:47.524286Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/tensorflow_probability/python/layers/util.py:99: UserWarning: `layer.add_variable` is deprecated and will be removed in a future version. Please use the `layer.add_weight()` method instead.\n  loc = add_variable_fn(\n/usr/local/lib/python3.10/site-packages/tensorflow_probability/python/layers/util.py:109: UserWarning: `layer.add_variable` is deprecated and will be removed in a future version. Please use the `layer.add_weight()` method instead.\n  untransformed_scale = add_variable_fn(\n/usr/local/lib/python3.10/site-packages/tf_keras/src/initializers/initializers.py:121: UserWarning: The initializer RandomNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1, Loss: 1.46237051486969\nEpoch 2, Loss: 1.4879472255706787\nEpoch 3, Loss: 1.4328763484954834\nEpoch 4, Loss: 1.4273285865783691\nEpoch 5, Loss: 1.4106730222702026\nEpoch 6, Loss: 1.424879789352417\nEpoch 7, Loss: 1.4188411235809326\nEpoch 8, Loss: 1.325886845588684\nEpoch 9, Loss: 0.8419479727745056\nEpoch 10, Loss: 1.384116291999817\nEpoch 11, Loss: 1.2648980617523193\nEpoch 12, Loss: 1.3807991743087769\nEpoch 13, Loss: 0.610039472579956\nEpoch 14, Loss: 1.264144778251648\nEpoch 15, Loss: 0.9423604607582092\nEpoch 16, Loss: 0.6237876415252686\nEpoch 17, Loss: 0.2971873879432678\nEpoch 18, Loss: 0.15923339128494263\nEpoch 19, Loss: 0.10731831192970276\nEpoch 20, Loss: 0.15032996237277985\nEpoch 21, Loss: 0.09284145385026932\nStopping early after 20 epochs.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Saving the BNN model for later use","metadata":{}},{"cell_type":"code","source":"# Set up checkpointing\ncheckpoint = tf.train.Checkpoint(optimizer=optimizer, model=model)\nmanager = tf.train.CheckpointManager(checkpoint, directory='/kaggle/working/chckpnt/newcheckpoints', max_to_keep=3)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:23:30.793191Z","iopub.execute_input":"2024-09-03T09:23:30.793601Z","iopub.status.idle":"2024-09-03T09:23:30.79925Z","shell.execute_reply.started":"2024-09-03T09:23:30.793567Z","shell.execute_reply":"2024-09-03T09:23:30.798492Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"checkpoint.save(file_prefix='/kaggle/working/chckpnt/newcheckpoints')","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:23:33.817755Z","iopub.execute_input":"2024-09-03T09:23:33.818089Z","iopub.status.idle":"2024-09-03T09:23:34.329479Z","shell.execute_reply.started":"2024-09-03T09:23:33.818061Z","shell.execute_reply":"2024-09-03T09:23:34.328649Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"'/kaggle/working/chckpnt/newcheckpoints-1'"},"metadata":{}}]},{"cell_type":"markdown","source":"## Doing Prediction","metadata":{}},{"cell_type":"code","source":"\n# Function to predict new data\ndef predict(model, new_data):\n    \"\"\"\n    Generates predictions from the model for the given new data.\n\n    Args:\n    model: The trained Bayesian neural network model.\n    new_data: A NumPy array or a TensorFlow tensor of new data to predict.\n\n    Returns:\n    A NumPy array of predictions.\n    \"\"\"\n    # Ensure the input is a TensorFlow tensor\n    new_data = tf.convert_to_tensor(new_data, dtype=tf.float32)\n\n    # Perform a forward pass and obtain the logits\n    logits = model(new_data)\n    \n    # Since the last layer uses softmax, the output will be the probabilities\n    probabilities = tf.nn.softmax(logits)\n\n\n    return probabilities.numpy()  # Convert probabilities to NumPy array for easier handling\n","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:20:47.526639Z","iopub.execute_input":"2024-09-03T09:20:47.526958Z","iopub.status.idle":"2024-09-03T09:20:47.532574Z","shell.execute_reply.started":"2024-09-03T09:20:47.526927Z","shell.execute_reply":"2024-09-03T09:20:47.531783Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"\npredictions = predict(model, X_test)\nclass_predictions = tf.argmax(predictions, axis=1)\n# print(predictions)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:20:48.086184Z","iopub.execute_input":"2024-09-03T09:20:48.086489Z","iopub.status.idle":"2024-09-03T09:20:48.427711Z","shell.execute_reply.started":"2024-09-03T09:20:48.086459Z","shell.execute_reply":"2024-09-03T09:20:48.426758Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"tf.Tensor(\n[0 0 0 2 3 2 3 3 3 3 3 3 3 0 3 0 3 3 3 0 3 3 3 1 3 2 3 3 2 3 3 0 0 2 3 0 3\n 0 3 3 2 2 3 2 0 2 3 3 3 0 3 3 2 0 1 1 2 1 3 3 3 0 1 1 3 3 3 2], shape=(68,), dtype=int64)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"tf.Tensor(\n[0 0 1 2 1 1 3 3 3 3 3 3 3 0 3 0 3 3 1 1 3 3 3 0 3 1 3 3 2 3 3 1 0 3 3 0 3\n 1 3 3 2 1 3 2 0 3 3 3 3 1 3 3 2 0 1 1 2 1 3 3 3 1 1 1 3 3 3 3], shape=(68,), dtype=int64)\n ","metadata":{}},{"cell_type":"markdown","source":"## Confusion Matrix","metadata":{}},{"cell_type":"code","source":"\nnm=np.sum(class_probs*predictions, axis=1)\nnm = nm.reshape(68, 1)\nval=class_probs*predictions\nfp=val/nm\n\n# Assuming predictions is the output from model.predict() and y_test is your true labels\n\n# Convert predicted probabilities to class predictions\npredicted_classes = np.argmax(fp, axis=1)\n\n# Compute the normalized confusion matrix\ncm = confusion_matrix(y_test, predicted_classes, normalize='true')\n\n# Plot the confusion matrix\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=np.unique(y_test))\ndisp.plot(cmap=plt.cm.Blues, values_format='.2f')  # Adjust format for percentage\n\n# Display the plot\nplt.title(\"Normalized Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\n\nplt.show()\n\n# Optionally, print the accuracy\naccuracy = np.count_nonzero(predicted_classes == y_test) / len(y_test) * 100\nprint(f\"Accuracy: {accuracy:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:20:48.445545Z","iopub.execute_input":"2024-09-03T09:20:48.446049Z","iopub.status.idle":"2024-09-03T09:20:48.610465Z","shell.execute_reply.started":"2024-09-03T09:20:48.446017Z","shell.execute_reply":"2024-09-03T09:20:48.609728Z"},"trusted":true},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Accuracy: 92.65%\n","output_type":"stream"}]}]}