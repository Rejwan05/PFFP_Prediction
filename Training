{"metadata":{"colab":{"provenance":[],"gpuType":"V28"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"TPU","kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":9224007,"sourceType":"datasetVersion","datasetId":5578455}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install imblearn","metadata":{"id":"EZDCBuiJ814Y","outputId":"6cdc3969-9131-4a0c-fe4a-78b2eee42b37","execution":{"iopub.status.busy":"2024-08-23T06:46:22.050699Z","iopub.execute_input":"2024-08-23T06:46:22.051067Z","iopub.status.idle":"2024-08-23T06:46:25.643644Z","shell.execute_reply.started":"2024-08-23T06:46:22.051037Z","shell.execute_reply":"2024-08-23T06:46:25.642779Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Requirement already satisfied: imblearn in /usr/local/lib/python3.10/site-packages (0.0)\nRequirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/site-packages (from imblearn) (0.12.3)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (3.5.0)\nRequirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.14.0)\nRequirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.5.1)\nRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn->imblearn) (1.26.4)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv1D, Flatten\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping\nfrom keras.regularizers import l2\nfrom keras.utils import plot_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\nfrom imblearn.over_sampling import ADASYN\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom keras.callbacks import EarlyStopping\nfrom keras.regularizers import l2\nimport tensorflow as tf\nimport tensorflow_probability as tfp","metadata":{"id":"KfBmDYp6gmKP","outputId":"21a061ec-f032-4c76-eb76-833de4a74d9a","execution":{"iopub.status.busy":"2024-08-23T06:46:25.645469Z","iopub.execute_input":"2024-08-23T06:46:25.645776Z","iopub.status.idle":"2024-08-23T06:46:34.427699Z","shell.execute_reply.started":"2024-08-23T06:46:25.645744Z","shell.execute_reply":"2024-08-23T06:46:34.426864Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"!pip install openpyxl","metadata":{"execution":{"iopub.status.busy":"2024-08-23T06:46:34.428822Z","iopub.execute_input":"2024-08-23T06:46:34.429483Z","iopub.status.idle":"2024-08-23T06:46:38.741692Z","shell.execute_reply.started":"2024-08-23T06:46:34.429448Z","shell.execute_reply":"2024-08-23T06:46:38.740672Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Collecting openpyxl\n  Downloading openpyxl-3.1.5-py2.py3-none-any.whl (250 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m250.9/250.9 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hCollecting et-xmlfile\n  Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\nInstalling collected packages: et-xmlfile, openpyxl\nSuccessfully installed et-xmlfile-1.1.0 openpyxl-3.1.5\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_excel('/kaggle/input/data-for-pffp/DepthbyDec_paper.xlsx', sheet_name='All Data')\ndf = df.iloc[:, :212]","metadata":{"id":"d0vKrJUnhcUW","execution":{"iopub.status.busy":"2024-08-23T06:46:38.743063Z","iopub.execute_input":"2024-08-23T06:46:38.743361Z","iopub.status.idle":"2024-08-23T06:46:39.908790Z","shell.execute_reply.started":"2024-08-23T06:46:38.743331Z","shell.execute_reply":"2024-08-23T06:46:39.908030Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"Dividing Input and Output","metadata":{"id":"tNk3miXJiNmX"}},{"cell_type":"code","source":"X = np.array(df.iloc[:, :-1])\ny = np.array(df.iloc[:, -1])","metadata":{"id":"RHvjwOnUifCZ","execution":{"iopub.status.busy":"2024-08-23T06:46:39.911160Z","iopub.execute_input":"2024-08-23T06:46:39.911735Z","iopub.status.idle":"2024-08-23T06:46:39.916399Z","shell.execute_reply.started":"2024-08-23T06:46:39.911706Z","shell.execute_reply":"2024-08-23T06:46:39.915752Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"X.shape","metadata":{"id":"uVkaAWeYBpmF","outputId":"f04c0192-0cf4-4955-d874-6a0e6841cafb","execution":{"iopub.status.busy":"2024-08-23T06:46:39.917245Z","iopub.execute_input":"2024-08-23T06:46:39.917487Z","iopub.status.idle":"2024-08-23T06:46:39.932828Z","shell.execute_reply.started":"2024-08-23T06:46:39.917462Z","shell.execute_reply":"2024-08-23T06:46:39.932206Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(449, 211)"},"metadata":{}}]},{"cell_type":"code","source":"non_zero_counts = np.count_nonzero(X, axis=1)","metadata":{"id":"65rHoNBNPbiu","execution":{"iopub.status.busy":"2024-08-23T06:46:39.933606Z","iopub.execute_input":"2024-08-23T06:46:39.933841Z","iopub.status.idle":"2024-08-23T06:46:39.942416Z","shell.execute_reply.started":"2024-08-23T06:46:39.933819Z","shell.execute_reply":"2024-08-23T06:46:39.941826Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"max_dec = np.max(X, axis=1)","metadata":{"id":"16DZh_prQooH","execution":{"iopub.status.busy":"2024-08-23T06:46:39.943222Z","iopub.execute_input":"2024-08-23T06:46:39.943450Z","iopub.status.idle":"2024-08-23T06:46:39.951968Z","shell.execute_reply.started":"2024-08-23T06:46:39.943426Z","shell.execute_reply":"2024-08-23T06:46:39.951292Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"max_dec.shape","metadata":{"id":"6VZ95-aKPgWf","outputId":"7048c4dd-1fb9-465c-90cc-ef76b3712a0c","execution":{"iopub.status.busy":"2024-08-23T06:46:39.952696Z","iopub.execute_input":"2024-08-23T06:46:39.952924Z","iopub.status.idle":"2024-08-23T06:46:39.962530Z","shell.execute_reply.started":"2024-08-23T06:46:39.952902Z","shell.execute_reply":"2024-08-23T06:46:39.961969Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(449,)"},"metadata":{}}]},{"cell_type":"code","source":"# Convert the target variable to numeric labels if necessary\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y)","metadata":{"id":"bGsmIQHBises","execution":{"iopub.status.busy":"2024-08-23T06:46:39.963253Z","iopub.execute_input":"2024-08-23T06:46:39.963475Z","iopub.status.idle":"2024-08-23T06:46:39.972143Z","shell.execute_reply.started":"2024-08-23T06:46:39.963452Z","shell.execute_reply":"2024-08-23T06:46:39.971490Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n\n# Create a scatter plot\nplt.scatter(non_zero_counts, max_dec, c=y)\n\n# Add labels and a title\nplt.xlabel('Penetration Depth (cm)')\nplt.ylabel('Maximum Deceleration (g)')\n# plt.title('Scatter Plot Example')\nplt.xscale('log')\nplt.yscale('log')\nplt.legend()\n# Show the plot\nplt.show()\n","metadata":{"id":"wPHc2BskRUdy","outputId":"9fcf63cf-974f-41bf-955b-7aafda0bf8f5","execution":{"iopub.status.busy":"2024-08-23T06:46:39.972956Z","iopub.execute_input":"2024-08-23T06:46:39.973179Z","iopub.status.idle":"2024-08-23T06:46:40.448507Z","shell.execute_reply.started":"2024-08-23T06:46:39.973156Z","shell.execute_reply":"2024-08-23T06:46:40.447768Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/491526300.py:13: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n  plt.legend()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"MD = pd.DataFrame(max_dec)\nPD = pd.DataFrame(non_zero_counts)\ny = pd.DataFrame(y)\n\nPD.to_csv('PD.csv', index=False)\nMD.to_csv('MD.csv', index=False)\ny.to_csv('y.csv', index=False)\n","metadata":{"id":"0shErMy12q5F","execution":{"iopub.status.busy":"2024-08-23T06:46:40.449564Z","iopub.execute_input":"2024-08-23T06:46:40.449905Z","iopub.status.idle":"2024-08-23T06:46:40.459886Z","shell.execute_reply.started":"2024-08-23T06:46:40.449873Z","shell.execute_reply":"2024-08-23T06:46:40.459124Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nXRF= np.column_stack((max_dec,non_zero_counts))\n# # Generate synthetic data (replace with your dataset)\n# X = np.random.rand(100, 4)  # Features\n# y = np.random.randint(2, size=100)  # Binary labels\n\n# Split data into training and testing sets\nX_trainRF, X_testRF, y_trainRF, y_testRF = train_test_split(XRF, y, test_size=0.2, random_state=42)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier\nclf.fit(X_trainRF, y_trainRF)\n\n# Predict probabilities for the test set\nclass_probs = clf.predict_proba(X_testRF)\n\n# 'class_probs' now contains the class probabilities for each sample in the test set\n","metadata":{"id":"EiDPH7ppTVUT","execution":{"iopub.status.busy":"2024-08-23T06:46:40.460881Z","iopub.execute_input":"2024-08-23T06:46:40.461164Z","iopub.status.idle":"2024-08-23T06:46:40.632590Z","shell.execute_reply.started":"2024-08-23T06:46:40.461135Z","shell.execute_reply":"2024-08-23T06:46:40.631882Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/sklearn/base.py:1473: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n  return fit_method(estimator, *args, **kwargs)\n","output_type":"stream"}]},{"cell_type":"code","source":"estimator = clf.estimators_[5]","metadata":{"id":"v2HmyU_FWdZa","execution":{"iopub.status.busy":"2024-08-23T06:46:40.635844Z","iopub.execute_input":"2024-08-23T06:46:40.636097Z","iopub.status.idle":"2024-08-23T06:46:40.639373Z","shell.execute_reply.started":"2024-08-23T06:46:40.636072Z","shell.execute_reply":"2024-08-23T06:46:40.638755Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"import joblib","metadata":{"id":"YIW-MAX2HRR0","execution":{"iopub.status.busy":"2024-08-23T06:46:40.640208Z","iopub.execute_input":"2024-08-23T06:46:40.640480Z","iopub.status.idle":"2024-08-23T06:46:40.651801Z","shell.execute_reply.started":"2024-08-23T06:46:40.640452Z","shell.execute_reply":"2024-08-23T06:46:40.651095Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"model_filename = 'random_forest_model.joblib'\njoblib.dump(clf, model_filename)","metadata":{"id":"jeXWqBrFG3ed","outputId":"910e0514-b5bb-45a0-9860-6cde6e8fdeda","execution":{"iopub.status.busy":"2024-08-23T06:46:40.652559Z","iopub.execute_input":"2024-08-23T06:46:40.652790Z","iopub.status.idle":"2024-08-23T06:46:40.711041Z","shell.execute_reply.started":"2024-08-23T06:46:40.652767Z","shell.execute_reply":"2024-08-23T06:46:40.710351Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"['random_forest_model.joblib']"},"metadata":{}}]},{"cell_type":"code","source":"class_probs\n","metadata":{"id":"81dFt7XJVCpU","outputId":"86eaddf7-5700-4124-e8be-5ad56be68609","execution":{"iopub.status.busy":"2024-08-23T06:46:40.711901Z","iopub.execute_input":"2024-08-23T06:46:40.712116Z","iopub.status.idle":"2024-08-23T06:46:40.718674Z","shell.execute_reply.started":"2024-08-23T06:46:40.712093Z","shell.execute_reply":"2024-08-23T06:46:40.718078Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"array([[0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.01, 0.  , 0.99],\n       [0.1 , 0.9 , 0.  , 0.  ],\n       [0.  , 0.  , 0.01, 0.99],\n       [0.  , 0.  , 0.03, 0.97],\n       [0.08, 0.71, 0.05, 0.16],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.13, 0.  , 0.87],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.79, 0.21, 0.  , 0.  ],\n       [0.  , 0.  , 0.02, 0.98],\n       [0.  , 0.  , 0.72, 0.28],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.07, 0.  , 0.93],\n       [0.  , 0.  , 0.02, 0.98],\n       [0.  , 0.  , 0.02, 0.98],\n       [0.45, 0.55, 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.06, 0.08, 0.86],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.56, 0.4 , 0.04],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.78, 0.22, 0.  , 0.  ],\n       [0.  , 0.03, 0.  , 0.97],\n       [0.  , 0.  , 0.03, 0.97],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.59, 0.12, 0.29, 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.01, 0.  , 0.99],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.4 , 0.6 ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.94, 0.06],\n       [0.  , 0.02, 0.  , 0.98],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.14, 0.86, 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.02, 0.98],\n       [0.  , 0.24, 0.  , 0.76],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.05, 0.  , 0.95],\n       [0.  , 0.  , 0.02, 0.98],\n       [0.94, 0.06, 0.  , 0.  ],\n       [0.87, 0.13, 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.01, 0.  , 0.99],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.11, 0.  , 0.89],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.  , 0.73, 0.27],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.04, 0.7 , 0.26],\n       [0.  , 0.  , 0.  , 1.  ],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.8 , 0.12, 0.08, 0.  ],\n       [1.  , 0.  , 0.  , 0.  ],\n       [0.4 , 0.6 , 0.  , 0.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.01, 0.99],\n       [0.  , 0.  , 0.03, 0.97],\n       [0.  , 0.  , 0.01, 0.99],\n       [0.  , 0.  , 0.01, 0.99],\n       [0.54, 0.36, 0.06, 0.04],\n       [0.  , 0.  , 0.44, 0.56],\n       [0.65, 0.06, 0.23, 0.06],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.  , 0.  , 0.  , 1.  ],\n       [0.65, 0.06, 0.29, 0.  ],\n       [0.  , 0.  , 0.56, 0.44]])"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\n\n# Original array with 4 values that sum up to 1\noriginal_array = np.array([0.8 , 0.12, 0.08, 0.  ])\n\n# Calculate the sum of the original array\noriginal_sum = np.sum(original_array)\n\n# Scale the array to sum up to 0.7\ndesired_sum = 0.8\nscaled_array = (original_array / original_sum) * desired_sum\n\nprint(scaled_array+0.05)\nprint(np.sum(scaled_array+0.05))\n","metadata":{"id":"gDKxXpEplEjl","outputId":"34752b40-3ce5-4a09-b0f2-36266e5a676d","execution":{"iopub.status.busy":"2024-08-23T06:46:40.719533Z","iopub.execute_input":"2024-08-23T06:46:40.720129Z","iopub.status.idle":"2024-08-23T06:46:40.729477Z","shell.execute_reply.started":"2024-08-23T06:46:40.720096Z","shell.execute_reply":"2024-08-23T06:46:40.728872Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"[0.69  0.146 0.114 0.05 ]\n1.0000000000000002\n","output_type":"stream"}]},{"cell_type":"code","source":"X_testRF[3,]","metadata":{"id":"Rf_SD9v3UFQ8","outputId":"dcf2dd92-a4a5-4072-caf3-e3e4286b352c","execution":{"iopub.status.busy":"2024-08-23T06:46:40.730387Z","iopub.execute_input":"2024-08-23T06:46:40.730673Z","iopub.status.idle":"2024-08-23T06:46:40.745521Z","shell.execute_reply.started":"2024-08-23T06:46:40.730644Z","shell.execute_reply":"2024-08-23T06:46:40.744884Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"array([ 6.95304154, 71.        ])"},"metadata":{}}]},{"cell_type":"code","source":"predRF=np.argmax(class_probs,axis=1)","metadata":{"id":"X_IMw_eUlAgu","execution":{"iopub.status.busy":"2024-08-23T06:46:40.746450Z","iopub.execute_input":"2024-08-23T06:46:40.746691Z","iopub.status.idle":"2024-08-23T06:46:40.765451Z","shell.execute_reply.started":"2024-08-23T06:46:40.746667Z","shell.execute_reply":"2024-08-23T06:46:40.764854Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"predRF_value=np.max(class_probs,axis=1)","metadata":{"id":"Ejvd1sdxadXB","execution":{"iopub.status.busy":"2024-08-23T06:46:40.766282Z","iopub.execute_input":"2024-08-23T06:46:40.766530Z","iopub.status.idle":"2024-08-23T06:46:40.781175Z","shell.execute_reply.started":"2024-08-23T06:46:40.766505Z","shell.execute_reply":"2024-08-23T06:46:40.780458Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"X_testRF_DF = pd.DataFrame(X_testRF)\ny_testRF_DF = pd.DataFrame(y_testRF)\npredRF_DF = pd.DataFrame(predRF)\npredRF_value_DF = pd.DataFrame(predRF_value)\nX_testRF_DF.to_csv('X_testRF_DF.csv', index=False)\ny_testRF_DF.to_csv('y_testRF_DF.csv', index=False)\npredRF_DF.to_csv('predRF_DF.csv', index=False)\npredRF_value_DF.to_csv('predRF_value_DF.csv', index=False)","metadata":{"id":"Fcaiqb6x_ebF","execution":{"iopub.status.busy":"2024-08-23T06:46:40.782055Z","iopub.execute_input":"2024-08-23T06:46:40.782314Z","iopub.status.idle":"2024-08-23T06:46:40.802182Z","shell.execute_reply.started":"2024-08-23T06:46:40.782286Z","shell.execute_reply":"2024-08-23T06:46:40.801492Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"X_testRF_DF.to_csv('X_testRF_DF.csv', index=False)\ny_testRF_DF.to_csv('y_testRF_DF.csv', index=False)\npredRF_DF.to_csv('predRF_DF.csv', index=False)\npredRF_value_DF.to_csv('predRF_value_DF.csv', index=False)","metadata":{"id":"hwii0DYKAmY7","execution":{"iopub.status.busy":"2024-08-23T06:46:40.803048Z","iopub.execute_input":"2024-08-23T06:46:40.803294Z","iopub.status.idle":"2024-08-23T06:46:40.814466Z","shell.execute_reply.started":"2024-08-23T06:46:40.803268Z","shell.execute_reply":"2024-08-23T06:46:40.813767Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"from matplotlib.axis import YTick\nfig, axs = plt.subplots(1, 2, figsize=(8, 6))\n\naxs[0].scatter(X_testRF[:,1], X_testRF[:,0], c=predRF)\n\n# Add labels and a title\naxs[0].set_xlabel('Penetration Depth (cm)')\naxs[0].set_ylabel('Maximum Deceleration (g)')\n# plt.title('Scatter Plot Example')\naxs[0].set_xscale('log')\naxs[0].set_yscale('log')\n\n\naxs[1].scatter(X_testRF[:,1], X_testRF[:,0], c=y_testRF)\n\n# Add labels and a title\naxs[1].set_xlabel('Penetration Depth (cm)')\naxs[1].set_ylabel('Maximum Deceleration (g)')\n# plt.title('Scatter Plot Example')\naxs[1].set_xscale('log')\naxs[1].set_yscale('log')\n\n\nplt.show()","metadata":{"id":"gZekcrEhkqH7","outputId":"21d9f0ef-1b39-4a14-94cf-e5583361879d","execution":{"iopub.status.busy":"2024-08-23T06:46:40.815323Z","iopub.execute_input":"2024-08-23T06:46:40.815577Z","iopub.status.idle":"2024-08-23T06:46:41.568679Z","shell.execute_reply.started":"2024-08-23T06:46:40.815550Z","shell.execute_reply":"2024-08-23T06:46:41.568023Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\n\n# Original array with 4 values that sum up to 1\noriginal_array = np.array([0.0, 0.0, 0.0, 1])\n\n# Define the new min and max values\nnew_min = 0.1\nnew_max = 0.9\n\n# Step 1: Calculate the range of values in the original array\noriginal_range = np.max(original_array) - np.min(original_array)\n\n# Step 2: Calculate the range of values in the new range\nnew_range = new_max - new_min\n\n# Step 3: Scale the values to the new range\nscaled_array = new_min + ((original_array - np.min(original_array)) / original_range) * new_range\n\n# Step 4: Normalize the scaled values so they sum up to 1\nscaled_array /= np.sum(scaled_array)\n\nprint(\"Original Array:\", original_array)\nprint(\"Scaled and Normalized Array:\", scaled_array)\nprint(\"Sum of Scaled Array:\", np.sum(scaled_array))\n","metadata":{"id":"KGHZ7b1EZIj8","outputId":"b4e951c1-4fcd-424e-eef1-bb8f445c2fb8","execution":{"iopub.status.busy":"2024-08-23T06:46:41.569624Z","iopub.execute_input":"2024-08-23T06:46:41.569968Z","iopub.status.idle":"2024-08-23T06:46:41.576336Z","shell.execute_reply.started":"2024-08-23T06:46:41.569935Z","shell.execute_reply":"2024-08-23T06:46:41.575711Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Original Array: [0. 0. 0. 1.]\nScaled and Normalized Array: [0.08333333 0.08333333 0.08333333 0.75      ]\nSum of Scaled Array: 0.9999999999999999\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Scalling the Input","metadata":{"id":"07FguFoTjhCZ"}},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(X.reshape(-1, 1))\nX_scaled = scaler.transform(X.reshape(-1, 1)).reshape(X.shape)","metadata":{"id":"AFcf7MGDjTSP","execution":{"iopub.status.busy":"2024-08-23T06:46:41.577169Z","iopub.execute_input":"2024-08-23T06:46:41.577454Z","iopub.status.idle":"2024-08-23T06:46:41.596346Z","shell.execute_reply.started":"2024-08-23T06:46:41.577429Z","shell.execute_reply":"2024-08-23T06:46:41.595762Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"scaler_filename = 'scaler_fit.joblib'\njoblib.dump(scaler, scaler_filename)","metadata":{"id":"vuv_q6QDIim0","outputId":"8745b4ae-38ff-4202-ee4b-6b2e8b1abb41","execution":{"iopub.status.busy":"2024-08-23T06:46:41.597194Z","iopub.execute_input":"2024-08-23T06:46:41.597427Z","iopub.status.idle":"2024-08-23T06:46:41.607447Z","shell.execute_reply.started":"2024-08-23T06:46:41.597397Z","shell.execute_reply":"2024-08-23T06:46:41.606882Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"['scaler_fit.joblib']"},"metadata":{}}]},{"cell_type":"code","source":"X_scaled.shape","metadata":{"id":"ewuqBNz7vVaJ","outputId":"cee23495-975c-4b10-c751-90ce65668b88","execution":{"iopub.status.busy":"2024-08-23T06:46:41.608297Z","iopub.execute_input":"2024-08-23T06:46:41.608597Z","iopub.status.idle":"2024-08-23T06:46:41.617505Z","shell.execute_reply.started":"2024-08-23T06:46:41.608573Z","shell.execute_reply":"2024-08-23T06:46:41.616945Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"(449, 211)"},"metadata":{}}]},{"cell_type":"markdown","source":"Test Train Split","metadata":{"id":"F4QZh6ixkg5y"}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)","metadata":{"id":"bsx8XXD_j4ZX","execution":{"iopub.status.busy":"2024-08-23T06:46:41.618301Z","iopub.execute_input":"2024-08-23T06:46:41.618696Z","iopub.status.idle":"2024-08-23T06:46:41.629039Z","shell.execute_reply.started":"2024-08-23T06:46:41.618670Z","shell.execute_reply":"2024-08-23T06:46:41.628428Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"print(sum(y_train==0))\nprint(sum(y_train==1))\nprint(sum(y_train==2))\nprint(sum(y_train==3))","metadata":{"id":"wcJih7p1oz7X","outputId":"fd2e33a6-b877-4c55-effe-80c575d6a110","execution":{"iopub.status.busy":"2024-08-23T06:46:41.629842Z","iopub.execute_input":"2024-08-23T06:46:41.630090Z","iopub.status.idle":"2024-08-23T06:46:41.640446Z","shell.execute_reply.started":"2024-08-23T06:46:41.630064Z","shell.execute_reply":"2024-08-23T06:46:41.639770Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"0\n0\n0\n0\n","output_type":"stream"}]},{"cell_type":"code","source":"print(sum(y_test==0))\nprint(sum(y_test==1))\nprint(sum(y_test==2))\nprint(sum(y_test==3))","metadata":{"id":"PTrowbDspLfn","outputId":"0b448421-d2e5-47dd-8ef2-fbaab361527b","execution":{"iopub.status.busy":"2024-08-23T06:46:41.641315Z","iopub.execute_input":"2024-08-23T06:46:41.641579Z","iopub.status.idle":"2024-08-23T06:46:41.652593Z","shell.execute_reply.started":"2024-08-23T06:46:41.641552Z","shell.execute_reply":"2024-08-23T06:46:41.652020Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"0\n0\n0\n0\n","output_type":"stream"}]},{"cell_type":"code","source":"17+6+1+44","metadata":{"id":"VxXWrMCtFjlQ","outputId":"c481fbf0-18a5-4cbd-ec0e-5314ed7c50ad","execution":{"iopub.status.busy":"2024-08-23T06:46:41.653334Z","iopub.execute_input":"2024-08-23T06:46:41.653550Z","iopub.status.idle":"2024-08-23T06:46:41.663989Z","shell.execute_reply.started":"2024-08-23T06:46:41.653528Z","shell.execute_reply":"2024-08-23T06:46:41.663363Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"68"},"metadata":{}}]},{"cell_type":"markdown","source":"Oversampling","metadata":{"id":"lIHdi39wosJN"}},{"cell_type":"code","source":"ada = ADASYN(random_state=50)\nX_train_balanced, y_train_balanced = ada.fit_resample(X_train, y_train)","metadata":{"id":"RnfMpiUOBrpj","execution":{"iopub.status.busy":"2024-08-23T06:46:41.664754Z","iopub.execute_input":"2024-08-23T06:46:41.664993Z","iopub.status.idle":"2024-08-23T06:46:41.892891Z","shell.execute_reply.started":"2024-08-23T06:46:41.664959Z","shell.execute_reply":"2024-08-23T06:46:41.892067Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot all time series in x_train with different colors\nmmmm=300\nfor i in range(mmmm,mmmm+10):\n    plt.plot(X_train_balanced[i].flatten(), label=f'Sample {i+1}')\n\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Time Series')\n\nplt.show()","metadata":{"id":"ibrLDm2TBwwl","outputId":"99ce7140-cdec-4504-8de2-fed7649512b3","execution":{"iopub.status.busy":"2024-08-23T06:46:41.893940Z","iopub.execute_input":"2024-08-23T06:46:41.894219Z","iopub.status.idle":"2024-08-23T06:46:42.019198Z","shell.execute_reply.started":"2024-08-23T06:46:41.894191Z","shell.execute_reply":"2024-08-23T06:46:42.018248Z"},"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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9HsnIq0UbkQko5x33nmMHDmSm266iZ///OeEQiFGjRrF8ccfz8KFCzt97A9+8AMeeughnn/+eR588EGampoYMWIE55xzDtdddx0HHnhgr7xOZ+666y5mzJjB//zP//CDH/wAn8/HuHHj+NrXvsaxxx4LuCFo9erVPPzww1RUVFBYWMisWbN48MEHU8YoIvtGxy+IiIjIgKI5NyIiIjKgKNyIiIjIgKJwIyIiIgOKwo2IiIgMKAo3IiIiMqAo3IiIiMiAMuj2uXEchx07dpCfn49lWekejoiIiHSDMYb6+npGjhzZ9VlvJo2ef/558/nPf96MGDHCAObRRx/t8jErVqww06dPN4FAwEyYMMH8/ve/79Frbtu2zQC66aabbrrppls/vG3btq3Ln/Vprdw0NjYydepULr74Yr74xS92ef9NmzZxxhln8M1vfpMHH3yQ5cuX841vfIMRI0Ywb968br1mfn4+ANu2baOgoOBTjV9ERET6Rl1dHWPGjEn8HO9MxuxQbFkWjz76KPPnz+/wPtdeey1PPvkk69evT1w755xzqKmpYdmyZd16nbq6OgoLC6mtrVW4ERER6Sd68vO7X00oXrVqFXPnzk25Nm/ePFatWpWmEYmIiEim6VcTisvLyyktLU25VlpaSl1dHc3NzWRnZ7d5TCgUIhQKJT6vq6vb7+MUERGR9OlXlZt9sXTpUgoLCxO3MWPGpHtIIiIish/1q3BTVlZGRUVFyrWKigoKCgrardoALF68mNra2sRt27ZtfTFUERERSZN+1ZaaM2cOTz31VMq1Z555hjlz5nT4mGAwSDAY3N9DExERkQyR1spNQ0MD69atY926dYC71HvdunVs3boVcKsuF154YeL+3/zmN/n444/5r//6L95//31++9vf8pe//IVrrrkmHcMXERGRDJTWcPPGG28wffp0pk+fDsCiRYuYPn06S5YsAWDnzp2JoANw4IEH8uSTT/LMM88wdepUbrnlFu69995u73EjIiIiA1/G7HPTV7TPjYiISP8zYPe5EREREemKwo2IiIgMKAo3IiIiMqAo3IiIiMiAonCToRzHIRKJpHsYIiIi/Y7CTYZ65JFHuPXWW2lubk73UERERPoVhZsMtW3bNpqbm9mzZ0+6hyIiItKvKNxkqGg0mu4hiIiI9EsKNxkqHm4G2R6LIiIin5rCTQZyHAfH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vmm2bNlijDHmpptuMkVFReb//u//zFtvvWW+8IUvmAMPPNA0NzcnnuPUU08106dPN6+99pp56aWXzMSJE825556brm9pwOrsvaqvrzff+973zKpVq8ymTZvMs88+a4488kgzceJE09LSkngOvVd94/LLLzeFhYVm5cqVZufOnYlbU1NT4j5d/dsXjUbN4Ycfbk455RSzbt06s2zZMjN8+HCzePHidHxL+0Thppfcfvvt5oADDjCBQMDMmjXLvPrqq+ke0qB39tlnmxEjRphAIGBGjRplzj77bLNx48bE15ubm823vvUtM2TIEJOTk2P+4z/+w+zcuTONIx5cVqxYYYA2twULFhhj3OXg1113nSktLTXBYNB89rOfNRs2bEh5jt27d5tzzz3X5OXlmYKCArNw4UJTX1+fhu9mYOvsvWpqajKnnHKKGT58uPH7/Wbs2LHmkksuafM/d3qv+kZ77xNgfv/73yfu051/+zZv3mxOO+00k52dbYqLi813v/tdE4lE+vi72XeWMcb0dbVIREREZH/RnBsREREZUBRuREREZEBRuBEREZEBReFGREREBhSFGxERERlQFG5ERERkQFG4ERERkQFF4UZE+pWLLrqI+fPnp3sYIpLBdCq4iGQMy7I6/fr111/Pr371K7T3qIh0RuFGRDLGzp07Ex8/8sgjLFmyhA0bNiSu5eXlkZeXl46hiUg/oraUiGSMsrKyxK2wsBDLslKu5eXltWlLnXjiiVx11VV85zvfYciQIZSWlnLPPffQ2NjIwoULyc/P56CDDuLpp59Oea3169dz2mmnkZeXR2lpKRdccAG7du3q4+9YRPYHhRsR6fceeOABiouLWb16NVdddRWXX345X/nKVzjmmGNYu3Ytp5xyChdccAFNTU0A1NTUcPLJJzN9+nTeeOMNli1bRkVFBV/96lfT/J2ISG9QuBGRfm/q1Kn86Ec/YuLEiSxevJisrCyKi4u55JJLmDhxIkuWLGH37t289dZbAPzmN79h+vTp3HjjjUyePJnp06dz3333sWLFCj744IM0fzci8mlpzo2I9HtHHHFE4mOv18uwYcOYMmVK4lppaSkAlZWVAPz73/9mxYoV7c7f+eijjzj44IP384hFZH9SuBGRfs/v96d8bllWyrX4KizHcQBoaGjgzDPP5Oabb27zXCNGjNiPIxWRvqBwIyKDzpFHHsn//u//Mm7cOHw+/TMoMtBozo2IDDpXXHEF1dXVnHvuubz++ut89NFH/POf/2ThwoXYtp3u4YnIp6RwIyKDzsiRI3n55ZexbZtTTjmFKVOm8J3vfIeioiI8Hv2zKNLfWUZbfYqIiMgAov9FERERkQFF4UZEREQGFIUbERERGVAUbkRERGRAUbgRERGRAUXhRkRERAYUhRsREREZUBRuREREZEBRuBEREZEBReFGREREBhSFGxERERlQFG5ERERkQPn/0BU/MiCYUrcAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"code","source":"print(sum(y_train_balanced==0))\nprint(sum(y_train_balanced==1))\nprint(sum(y_train_balanced==2))\nprint(sum(y_train_balanced==3))","metadata":{"id":"0YtP3l-YzzU8","outputId":"3d726c9c-a179-4dc5-9f42-ba4ee3e33f73","execution":{"iopub.status.busy":"2024-08-23T06:46:42.020141Z","iopub.execute_input":"2024-08-23T06:46:42.020417Z","iopub.status.idle":"2024-08-23T06:46:42.025937Z","shell.execute_reply.started":"2024-08-23T06:46:42.020368Z","shell.execute_reply":"2024-08-23T06:46:42.025004Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"0\n0\n0\n0\n","output_type":"stream"}]},{"cell_type":"code","source":"\nX_test = np.reshape(X_test,[X_test.shape[0],X_test.shape[1],1])\n","metadata":{"id":"3nl8O7VSq1b_","execution":{"iopub.status.busy":"2024-08-23T06:46:42.027118Z","iopub.execute_input":"2024-08-23T06:46:42.027443Z","iopub.status.idle":"2024-08-23T06:46:42.036775Z","shell.execute_reply.started":"2024-08-23T06:46:42.027416Z","shell.execute_reply":"2024-08-23T06:46:42.035759Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"One Hot Encoding","metadata":{"id":"QWvTfcxaweiF"}},{"cell_type":"code","source":"y_train_hot = to_categorical(y_train_balanced, num_classes=4)","metadata":{"id":"sGuW58yHMUyc","execution":{"iopub.status.busy":"2024-08-23T06:46:42.037810Z","iopub.execute_input":"2024-08-23T06:46:42.038428Z","iopub.status.idle":"2024-08-23T06:46:42.045914Z","shell.execute_reply.started":"2024-08-23T06:46:42.038395Z","shell.execute_reply":"2024-08-23T06:46:42.045033Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_probability as tfp\n\n# Define the kernel divergence function\ndef kernel_divergence_fn(q, p, _):\n    return tfp.distributions.kl_divergence(q, p) / float(X_train_balanced.shape[0])\n\n# Model building\nclass BayesianConv1DModel(tf.Module):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n        self.conv1 = tfp.layers.Convolution1DFlipout(32, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.conv2 = tfp.layers.Convolution1DFlipout(64, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.flatten = tf.keras.layers.Flatten()\n        self.dense1 = tfp.layers.DenseFlipout(1024, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense2 = tfp.layers.DenseFlipout(64, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense3 = tfp.layers.DenseFlipout(4, activation='softmax', kernel_divergence_fn=kernel_divergence_fn)\n\n    def __call__(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.flatten(x)\n        x = self.dense1(x)\n        x = self.dense2(x)\n        x = self.dense3(x)\n        return x\n\n# Instantiate the model\nmodel = BayesianConv1DModel()\n\n# Define loss function\ndef loss_fn(labels, predictions):\n    return tf.reduce_mean(tf.keras.losses.categorical_crossentropy(labels, predictions))\n\n# Define the training step\ndef train_step(model, inputs, labels, optimizer):\n    with tf.GradientTape() as tape:\n        predictions = model(inputs)\n        loss = loss_fn(labels, predictions)\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    return loss\n\n# # Example training loop\n# optimizer = tf.keras.optimizers.Adam()\n# for epoch in range(epochs):\n#     for inputs, labels in dataset:\n#         loss = train_step(model, inputs, labels, optimizer)\n#     print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")","metadata":{"id":"_r-1-g_pkBzX","outputId":"7863fd0b-d57d-4ec3-86ed-4eb0cf380b84","execution":{"iopub.status.busy":"2024-08-23T06:46:42.047082Z","iopub.execute_input":"2024-08-23T06:46:42.047300Z","iopub.status.idle":"2024-08-23T06:46:42.070692Z","shell.execute_reply.started":"2024-08-23T06:46:42.047278Z","shell.execute_reply":"2024-08-23T06:46:42.069978Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\nX_train_balanced = np.reshape(X_train_balanced, (X_train_balanced.shape[0], 211, 1))\n# Convert the training data to a TensorFlow Dataset\ntrain_dataset = tf.data.Dataset.from_tensor_slices((X_train_balanced, y_train_hot))\n\n# Batch the dataset and shuffle it if necessary\ntrain_dataset = train_dataset.batch(32).shuffle(buffer_size=100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T06:46:42.071642Z","iopub.execute_input":"2024-08-23T06:46:42.071940Z","iopub.status.idle":"2024-08-23T06:46:45.786935Z","shell.execute_reply.started":"2024-08-23T06:46:42.071915Z","shell.execute_reply":"2024-08-23T06:46:45.786057Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1724395605.744172      13 service.cc:145] XLA service 0x587012824a40 initialized for platform TPU (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1724395605.744225      13 service.cc:153]   StreamExecutor device (0): TPU, 2a886c8\nI0000 00:00:1724395605.744229      13 service.cc:153]   StreamExecutor device (1): TPU, 2a886c8\nI0000 00:00:1724395605.744232      13 service.cc:153]   StreamExecutor device (2): TPU, 2a886c8\nI0000 00:00:1724395605.744235      13 service.cc:153]   StreamExecutor device (3): TPU, 2a886c8\nI0000 00:00:1724395605.744242      13 service.cc:153]   StreamExecutor device (4): TPU, 2a886c8\nI0000 00:00:1724395605.744244      13 service.cc:153]   StreamExecutor device (5): TPU, 2a886c8\nI0000 00:00:1724395605.744247      13 service.cc:153]   StreamExecutor device (6): TPU, 2a886c8\nI0000 00:00:1724395605.744249      13 service.cc:153]   StreamExecutor device (7): TPU, 2a886c8\n","output_type":"stream"}]},{"cell_type":"code","source":"# Example training loop\noptimizer = tf.keras.optimizers.Adam()\nfor epoch in range(50):\n    for inputs, labels in train_dataset:\n        loss = train_step(model, inputs, labels, optimizer)\n    print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T06:46:45.787896Z","iopub.execute_input":"2024-08-23T06:46:45.788160Z","iopub.status.idle":"2024-08-23T07:26:38.150622Z","shell.execute_reply.started":"2024-08-23T06:46:45.788134Z","shell.execute_reply":"2024-08-23T07:26:38.149652Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/tensorflow_probability/python/layers/util.py:99: UserWarning: `layer.add_variable` is deprecated and will be removed in a future version. Please use the `layer.add_weight()` method instead.\n  loc = add_variable_fn(\n/usr/local/lib/python3.10/site-packages/tensorflow_probability/python/layers/util.py:109: UserWarning: `layer.add_variable` is deprecated and will be removed in a future version. Please use the `layer.add_weight()` method instead.\n  untransformed_scale = add_variable_fn(\n/usr/local/lib/python3.10/site-packages/tf_keras/src/initializers/initializers.py:121: UserWarning: The initializer RandomNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Epoch 0, Loss: 1.7938286066055298\nEpoch 1, Loss: 1.3007729053497314\nEpoch 2, Loss: 1.6085797548294067\nEpoch 3, Loss: 1.5574164390563965\nEpoch 4, Loss: 1.3129942417144775\nEpoch 5, Loss: 1.3124040365219116\nEpoch 6, Loss: 1.2743642330169678\nEpoch 7, Loss: 1.3270632028579712\nEpoch 8, Loss: 1.4238182306289673\nEpoch 9, Loss: 1.3571041822433472\nEpoch 10, Loss: 1.1957569122314453\nEpoch 11, Loss: 1.7500662803649902\nEpoch 12, Loss: 0.7958534955978394\nEpoch 13, Loss: 0.2923623323440552\nEpoch 14, Loss: 0.323056697845459\nEpoch 15, Loss: 0.5956219434738159\nEpoch 16, Loss: 0.7873874306678772\nEpoch 17, Loss: 0.652521550655365\nEpoch 18, Loss: 0.9441648721694946\nEpoch 19, Loss: 0.20741359889507294\nEpoch 20, Loss: 0.7712804675102234\nEpoch 21, Loss: 0.22557497024536133\nEpoch 22, Loss: 0.10942121595144272\nEpoch 23, Loss: 0.7807544469833374\nEpoch 24, Loss: 0.5651094913482666\nEpoch 25, Loss: 0.12804090976715088\nEpoch 26, Loss: 0.26787060499191284\nEpoch 27, Loss: 0.041116923093795776\nEpoch 28, Loss: 0.21830308437347412\nEpoch 29, Loss: 0.16591805219650269\nEpoch 30, Loss: 0.1590462327003479\nEpoch 31, Loss: 0.057937417179346085\nEpoch 32, Loss: 0.6144645810127258\nEpoch 33, Loss: 0.5983591079711914\nEpoch 34, Loss: 0.6063588261604309\nEpoch 35, Loss: 0.5724210143089294\nEpoch 36, Loss: 0.1350824534893036\nEpoch 37, Loss: 0.005066957324743271\nEpoch 38, Loss: 0.44637632369995117\nEpoch 39, Loss: 0.10811902582645416\nEpoch 40, Loss: 0.508669376373291\nEpoch 41, Loss: 0.44872915744781494\nEpoch 42, Loss: 0.16260921955108643\nEpoch 43, Loss: 0.09798813611268997\nEpoch 44, Loss: 0.5430160164833069\nEpoch 45, Loss: 0.09762274473905563\nEpoch 46, Loss: 0.5361967086791992\nEpoch 47, Loss: 0.036415766924619675\nEpoch 48, Loss: 0.4105603098869324\nEpoch 49, Loss: 0.7611709833145142\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Testing","metadata":{"id":"BVdjvN5Y1wsP"}},{"cell_type":"code","source":"import numpy as np\n\n# Function to predict new data\ndef predict(model, new_data):\n    \"\"\"\n    Generates predictions from the model for the given new data.\n\n    Args:\n    model: The trained Bayesian neural network model.\n    new_data: A NumPy array or a TensorFlow tensor of new data to predict.\n\n    Returns:\n    A NumPy array of predictions.\n    \"\"\"\n    # Ensure the input is a TensorFlow tensor\n    new_data = tf.convert_to_tensor(new_data, dtype=tf.float32)\n\n    # Perform a forward pass and obtain the logits\n    logits = model(new_data)\n    \n    # Since the last layer uses softmax, the output will be the probabilities\n    probabilities = tf.nn.softmax(logits)\n\n    # Optionally, you can obtain the class predictions directly\n#     class_predictions = tf.argmax(logits, axis=1)\n\n    return probabilities.numpy()  # Convert probabilities to NumPy array for easier handling\n\n# Example usage\n# Assuming `X_new` is your new dataset ready to be predicted\n# X_new = np.random.random((10, sequence_length, channels))  # Dummy data for illustration\n# predictions = predict(model, X_new)\n# print(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:26:38.155861Z","iopub.execute_input":"2024-08-23T07:26:38.156247Z","iopub.status.idle":"2024-08-23T07:26:38.162085Z","shell.execute_reply.started":"2024-08-23T07:26:38.156215Z","shell.execute_reply":"2024-08-23T07:26:38.161301Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"# Example usage\n# Assuming `X_new` is your new dataset ready to be predicted\n# X_new = np.random.random((10, sequence_length, channels))  # Dummy data for illustration\npredictions = predict(model, X_test)\nclass_predictions = tf.argmax(predictions, axis=1)\nprint(predictions)\nprint(class_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:50:22.604014Z","iopub.execute_input":"2024-08-23T07:50:22.604825Z","iopub.status.idle":"2024-08-23T07:50:22.971618Z","shell.execute_reply.started":"2024-08-23T07:50:22.604788Z","shell.execute_reply":"2024-08-23T07:50:22.970684Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"[[0.17492019 0.17492644 0.47510424 0.17504917]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.17495944 0.47517073 0.17496105 0.17490882]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.1748777  0.17487772 0.17487775 0.47536677]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.47536585 0.17487834 0.1748779  0.17487799]\n [0.29348442 0.32911396 0.18875605 0.18864548]\n [0.1748777  0.17487775 0.17487773 0.47536677]\n [0.1748777  0.17487772 0.1748777  0.4753669 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.17488375 0.47534704 0.1748881  0.17488107]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.17488717 0.1749001  0.174905   0.47530773]\n [0.27384984 0.35003528 0.18811026 0.1880046 ]\n [0.17608882 0.177502   0.4681974  0.17821173]\n [0.17782293 0.18658128 0.17946392 0.45613185]\n [0.17487773 0.17487784 0.17487773 0.47536665]\n [0.17487802 0.17487907 0.17487806 0.4753647 ]\n [0.29609475 0.3155518  0.19676334 0.19159007]\n [0.17504397 0.47510663 0.17492574 0.17492367]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.17513832 0.17523159 0.17588955 0.4737405 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.17487884 0.17487966 0.17488176 0.4753598 ]\n [0.1748777  0.1748777  0.17487772 0.4753669 ]\n [0.17494948 0.17504898 0.17508163 0.47491986]\n [0.17487773 0.17487776 0.17487785 0.47536653]\n [0.18704744 0.19002737 0.37565163 0.24727352]\n [0.17489582 0.17495295 0.17489882 0.47525242]\n [0.18715474 0.25788957 0.18792172 0.36703396]\n [0.1748777  0.1748777  0.17487772 0.4753669 ]\n [0.17487773 0.47536653 0.17487782 0.17487772]\n [0.47536653 0.17487793 0.17487775 0.17487775]\n [0.43770784 0.2015409  0.18044987 0.18030141]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.17574997 0.47225052 0.17659183 0.17540759]\n [0.17487791 0.17487854 0.17487797 0.47536564]\n [0.47536665 0.17487785 0.17487775 0.17487781]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.17488168 0.17489472 0.17488177 0.47534195]\n [0.4753661  0.17487822 0.17487782 0.17487782]\n [0.18401146 0.4110173  0.18391006 0.22106111]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.17487769 0.1748777  0.1748777  0.47536677]\n [0.1781338  0.18311614 0.45413792 0.18461213]\n [0.47536585 0.17487812 0.17487788 0.1748782 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.47535962 0.17488262 0.17487884 0.17487885]\n [0.4317028  0.20517853 0.18136016 0.18175861]\n [0.17487773 0.17487773 0.17487784 0.47536665]\n [0.1750679  0.17565936 0.17510676 0.47416598]\n [0.17496143 0.17497988 0.4748444  0.17521428]\n [0.40592828 0.22525764 0.18433489 0.18447924]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.18361604 0.4627693  0.1768089  0.17680575]\n [0.17542338 0.17693524 0.1755171  0.4721242 ]\n [0.17492087 0.17501864 0.17496477 0.4750957 ]\n [0.17491603 0.17502229 0.17492309 0.47513843]\n [0.18409324 0.40708208 0.18596476 0.22286002]\n [0.17487773 0.17487782 0.17487773 0.47536665]\n [0.17487812 0.1748795  0.17487814 0.4753642 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.176915   0.18407312 0.17694475 0.46206707]\n [0.17487773 0.17487782 0.17487773 0.47536665]\n [0.17870298 0.18858981 0.18118985 0.4515174 ]\n [0.4753669  0.1748777  0.1748777  0.1748777 ]\n [0.18685575 0.37578312 0.1870086  0.25035253]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.17487964 0.17488576 0.17487986 0.47535476]\n [0.17489396 0.17494783 0.17489421 0.47526404]\n [0.1748777  0.1748777  0.1748777  0.4753669 ]\n [0.17745095 0.17808966 0.1778727  0.46658668]\n [0.17953046 0.19666179 0.17986278 0.44394502]\n [0.4539255  0.18990788 0.17808276 0.17808394]\n [0.1755135  0.17573556 0.47181717 0.17693384]\n [0.17488082 0.1748903  0.17488165 0.47534704]\n [0.17487797 0.17487857 0.17487821 0.47536525]\n [0.32912564 0.2936281  0.18864134 0.18860501]\n [0.17492682 0.17505667 0.17495602 0.47506052]\n [0.1748777  0.1748777  0.1748777  0.47536686]\n [0.1748777  0.1748777  0.1748777  0.47536686]]\ntf.Tensor(\n[2 3 1 0 3 3 3 3 0 1 3 3 3 3 0 1 0 3 1 2 3 3 3 1 1 0 0 3 3 0 3 3 3 3 2 3 3\n 3 1 0 0 3 1 3 0 0 3 0 1 0 3 2 0 0 0 0 0 3 3 2 0 0 1 3 3 3 1 3 3 3 3 3 3 0\n 1 3 3 3 3 3 3 3 0 2 3 3 0 3 3 3], shape=(90,), dtype=int64)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_test=np.squeeze(np.array(y_test))","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:37:30.658849Z","iopub.execute_input":"2024-08-23T07:37:30.659185Z","iopub.status.idle":"2024-08-23T07:37:30.663142Z","shell.execute_reply.started":"2024-08-23T07:37:30.659157Z","shell.execute_reply":"2024-08-23T07:37:30.662399Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"np.count_nonzero(np.argmax(predictions,axis=1)==y_test)/len(y_test)*100\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:38:08.270087Z","iopub.execute_input":"2024-08-23T07:38:08.271008Z","iopub.status.idle":"2024-08-23T07:38:08.275769Z","shell.execute_reply.started":"2024-08-23T07:38:08.270973Z","shell.execute_reply":"2024-08-23T07:38:08.275036Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"86.66666666666667"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# Assuming predictions is the output from model.predict() and y_test is your true labels\n\n# Convert predicted probabilities to class predictions\npredicted_classes = np.argmax(predictions, axis=1)\n\n# Compute the normalized confusion matrix\ncm = confusion_matrix(y_test, predicted_classes, normalize='true')\n\n# Plot the confusion matrix\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=np.unique(y_test))\ndisp.plot(cmap=plt.cm.Blues, values_format='.2f')  # Adjust format for percentage\n\n# Display the plot\nplt.title(\"Normalized Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\n\nplt.show()\n\n# Optionally, print the accuracy\naccuracy = np.count_nonzero(predicted_classes == y_test) / len(y_test) * 100\nprint(f\"Accuracy: {accuracy:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:42:03.469215Z","iopub.execute_input":"2024-08-23T07:42:03.469592Z","iopub.status.idle":"2024-08-23T07:42:03.633403Z","shell.execute_reply.started":"2024-08-23T07:42:03.469558Z","shell.execute_reply":"2024-08-23T07:42:03.632629Z"},"trusted":true},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Accuracy: 86.67%\n","output_type":"stream"}]},{"cell_type":"code","source":"tf.saved_model.save(model,'/kaggle/working/main_folder/')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:03:38.044871Z","iopub.execute_input":"2024-08-23T08:03:38.045224Z","iopub.status.idle":"2024-08-23T08:03:58.171058Z","shell.execute_reply.started":"2024-08-23T08:03:38.045196Z","shell.execute_reply":"2024-08-23T08:03:58.170187Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"INFO:tensorflow:Assets written to: /kaggle/working/main_folder/assets\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:Assets written to: /kaggle/working/main_folder/assets\n","output_type":"stream"}]},{"cell_type":"code","source":"loaded_model = tf.saved_model.load('/kaggle/working/main_folder')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:04:14.471610Z","iopub.execute_input":"2024-08-23T08:04:14.472542Z","iopub.status.idle":"2024-08-23T08:04:14.685215Z","shell.execute_reply.started":"2024-08-23T08:04:14.472510Z","shell.execute_reply":"2024-08-23T08:04:14.684378Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_probability as tfp\n\n# Define the kernel divergence function\ndef kernel_divergence_fn(q, p, _):\n    return tfp.distributions.kl_divergence(q, p) / float(X_train_balanced.shape[0])\n# Model building\nclass BayesianConv1DModel2(tf.keras.Model):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n        self.conv1 = tfp.layers.Convolution1DFlipout(32, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.conv2 = tfp.layers.Convolution1DFlipout(64, kernel_size=3, activation='relu', \n                                                     kernel_divergence_fn=kernel_divergence_fn, \n                                                     padding='VALID')\n        self.flatten = tf.keras.layers.Flatten()\n        self.dense1 = tfp.layers.DenseFlipout(1024, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense2 = tfp.layers.DenseFlipout(64, activation='relu', kernel_divergence_fn=kernel_divergence_fn)\n        self.dense3 = tfp.layers.DenseFlipout(4, activation='softmax', kernel_divergence_fn=kernel_divergence_fn)\n\n    def __call__(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.flatten(x)\n        x = self.dense1(x)\n        x = self.dense2(x)\n        x = self.dense3(x)\n        return x\n\n# Instantiate the model\nmodel2 = BayesianConv1DModel2()\n\n# Define loss function\ndef loss_fn(labels, predictions):\n    return tf.reduce_mean(tf.keras.losses.categorical_crossentropy(labels, predictions))\n\n# Define the training step\ndef train_step(model, inputs, labels, optimizer):\n    with tf.GradientTape() as tape:\n        predictions = model(inputs)\n        loss = loss_fn(labels, predictions)\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    return loss\n\n# # Example training loop\n# optimizer = tf.keras.optimizers.Adam()\n# for epoch in range(epochs):\n#     for inputs, labels in dataset:\n#         loss = train_step(model, inputs, labels, optimizer)\n#     print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")\n\n# # Example training loop\n# optimizer = tf.keras.optimizers.Adam()\n# for epoch in range(epochs):\n#     for inputs, labels in dataset:\n#         loss = train_step(model, inputs, labels, optimizer)\n#     print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:17:16.670341Z","iopub.execute_input":"2024-08-23T08:17:16.670907Z","iopub.status.idle":"2024-08-23T08:17:16.689257Z","shell.execute_reply.started":"2024-08-23T08:17:16.670870Z","shell.execute_reply":"2024-08-23T08:17:16.688537Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"optimizer = tf.keras.optimizers.Adam()\nfor epoch in range(3):\n    for inputs, labels in train_dataset:\n        loss = train_step(model2, inputs, labels, optimizer)\n    print(f\"Epoch {epoch}, Loss: {loss.numpy()}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:17:28.638820Z","iopub.execute_input":"2024-08-23T08:17:28.639406Z","iopub.status.idle":"2024-08-23T08:17:29.290670Z","shell.execute_reply.started":"2024-08-23T08:17:28.639369Z","shell.execute_reply":"2024-08-23T08:17:29.289200Z"},"trusted":true},"execution_count":90,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[90], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m epoch \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m3\u001b[39m):\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m inputs, labels \u001b[38;5;129;01min\u001b[39;00m train_dataset:\n\u001b[0;32m----> 4\u001b[0m         loss \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel2\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moptimizer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEpoch \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mepoch\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, Loss: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mloss\u001b[38;5;241m.\u001b[39mnumpy()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n","Cell \u001b[0;32mIn[89], line 44\u001b[0m, in \u001b[0;36mtrain_step\u001b[0;34m(model, inputs, labels, optimizer)\u001b[0m\n\u001b[1;32m     42\u001b[0m     loss \u001b[38;5;241m=\u001b[39m loss_fn(labels, predictions)\n\u001b[1;32m     43\u001b[0m gradients \u001b[38;5;241m=\u001b[39m tape\u001b[38;5;241m.\u001b[39mgradient(loss, model\u001b[38;5;241m.\u001b[39mtrainable_variables)\n\u001b[0;32m---> 44\u001b[0m \u001b[43moptimizer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_gradients\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mzip\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mgradients\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrainable_variables\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     45\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m loss\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/keras/src/optimizers/base_optimizer.py:290\u001b[0m, in \u001b[0;36mBaseOptimizer.apply_gradients\u001b[0;34m(self, grads_and_vars)\u001b[0m\n\u001b[1;32m    289\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_gradients\u001b[39m(\u001b[38;5;28mself\u001b[39m, grads_and_vars):\n\u001b[0;32m--> 290\u001b[0m     grads, trainable_variables \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;241m*\u001b[39mgrads_and_vars)\n\u001b[1;32m    291\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply(grads, trainable_variables)\n\u001b[1;32m    292\u001b[0m     \u001b[38;5;66;03m# Return iterations for compat with tf.keras.\u001b[39;00m\n","\u001b[0;31mValueError\u001b[0m: not enough values to unpack (expected 2, got 0)"],"ename":"ValueError","evalue":"not enough values to unpack (expected 2, got 0)","output_type":"error"}]},{"cell_type":"code","source":"\n\n# Specify the path to the directory where the model was saved\nmodel_directory = '/kaggle/working/main_folder/'\n\n# Load the model\nloaded_model = tf.saved_model.load(model_directory)\n\n# You can now use loaded_model to perform predictions or further processing","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:06:06.492976Z","iopub.execute_input":"2024-08-23T08:06:06.493934Z","iopub.status.idle":"2024-08-23T08:06:06.701908Z","shell.execute_reply.started":"2024-08-23T08:06:06.493881Z","shell.execute_reply":"2024-08-23T08:06:06.700992Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"model.save('/kaggle/working/main_folder/')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:11:56.725375Z","iopub.execute_input":"2024-08-23T08:11:56.726235Z","iopub.status.idle":"2024-08-23T08:11:56.755706Z","shell.execute_reply.started":"2024-08-23T08:11:56.726196Z","shell.execute_reply":"2024-08-23T08:11:56.754830Z"},"trusted":true},"execution_count":84,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[84], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/working/main_folder/\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mAttributeError\u001b[0m: 'BayesianConv1DModel' object has no attribute 'save'"],"ename":"AttributeError","evalue":"'BayesianConv1DModel' object has no attribute 'save'","output_type":"error"}]},{"cell_type":"code","source":"# Load the weights from the save directory\nmodel.load_weights('/kaggle/working/main_folder/variables/variables')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:08:32.080756Z","iopub.execute_input":"2024-08-23T08:08:32.081147Z","iopub.status.idle":"2024-08-23T08:08:32.111042Z","shell.execute_reply.started":"2024-08-23T08:08:32.081118Z","shell.execute_reply":"2024-08-23T08:08:32.110129Z"},"trusted":true},"execution_count":83,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[83], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Load the weights from the save directory\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload_weights\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/working/main_folder/variables/variables\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mAttributeError\u001b[0m: 'BayesianConv1DModel' object has no attribute 'load_weights'"],"ename":"AttributeError","evalue":"'BayesianConv1DModel' object has no attribute 'load_weights'","output_type":"error"}]},{"cell_type":"code","source":"# Assuming the model has a default serving function\ninfer = loaded_model.signatures['serving_default']\n\n# To make predictions, provide input data as a TensorFlow tensor\n# Example: predicting using input data 'input_tensor'\n# predictions = infer(input_tensor=tf.constant([[your_input_data]]))  # Adjust your_input_data accordingly\n\n# print(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:06:35.543176Z","iopub.execute_input":"2024-08-23T08:06:35.543566Z","iopub.status.idle":"2024-08-23T08:06:35.578105Z","shell.execute_reply.started":"2024-08-23T08:06:35.543531Z","shell.execute_reply":"2024-08-23T08:06:35.577194Z"},"trusted":true},"execution_count":81,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[81], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Assuming the model has a default serving function\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m infer \u001b[38;5;241m=\u001b[39m \u001b[43mloaded_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msignatures\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mserving_default\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# To make predictions, provide input data as a TensorFlow tensor\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Example: predicting using input data 'input_tensor'\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# predictions = infer(input_tensor=tf.constant([[your_input_data]]))  # Adjust your_input_data accordingly\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \n\u001b[1;32m      8\u001b[0m \u001b[38;5;66;03m# print(predictions)\u001b[39;00m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/tensorflow/python/saved_model/signature_serialization.py:302\u001b[0m, in \u001b[0;36m_SignatureMap.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    301\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__getitem__\u001b[39m(\u001b[38;5;28mself\u001b[39m, key):\n\u001b[0;32m--> 302\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_signatures\u001b[49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\n","\u001b[0;31mKeyError\u001b[0m: 'serving_default'"],"ename":"KeyError","evalue":"'serving_default'","output_type":"error"}]},{"cell_type":"code","source":"loaded_model(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:04:17.488418Z","iopub.execute_input":"2024-08-23T08:04:17.489234Z","iopub.status.idle":"2024-08-23T08:04:17.516740Z","shell.execute_reply.started":"2024-08-23T08:04:17.489196Z","shell.execute_reply":"2024-08-23T08:04:17.515761Z"},"trusted":true},"execution_count":79,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[79], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mloaded_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mTypeError\u001b[0m: '_UserObject' object is not callable"],"ename":"TypeError","evalue":"'_UserObject' object is not callable","output_type":"error"}]},{"cell_type":"code","source":"model.load_weights(tf.train.latest_checkpoint('/kaggle/working/variables'))","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:01:15.882225Z","iopub.execute_input":"2024-08-23T08:01:15.882617Z","iopub.status.idle":"2024-08-23T08:01:15.913651Z","shell.execute_reply.started":"2024-08-23T08:01:15.882588Z","shell.execute_reply":"2024-08-23T08:01:15.912615Z"},"trusted":true},"execution_count":72,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[72], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload_weights\u001b[49m(tf\u001b[38;5;241m.\u001b[39mtrain\u001b[38;5;241m.\u001b[39mlatest_checkpoint(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/working/variables\u001b[39m\u001b[38;5;124m'\u001b[39m))\n","\u001b[0;31mAttributeError\u001b[0m: 'BayesianConv1DModel' object has no attribute 'load_weights'"],"ename":"AttributeError","evalue":"'BayesianConv1DModel' object has no attribute 'load_weights'","output_type":"error"}]},{"cell_type":"code","source":"predictions = predict(loaded_model, X_test)\nclass_predictions = tf.argmax(predictions, axis=1)\nprint(predictions)\nprint(class_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T07:48:36.854114Z","iopub.execute_input":"2024-08-23T07:48:36.854831Z","iopub.status.idle":"2024-08-23T07:48:36.902874Z","shell.execute_reply.started":"2024-08-23T07:48:36.854796Z","shell.execute_reply":"2024-08-23T07:48:36.901773Z"},"trusted":true},"execution_count":65,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[65], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m predictions \u001b[38;5;241m=\u001b[39m \u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mloaded_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m class_predictions \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39margmax(predictions, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(predictions)\n","Cell \u001b[0;32mIn[44], line 19\u001b[0m, in \u001b[0;36mpredict\u001b[0;34m(model, new_data)\u001b[0m\n\u001b[1;32m     16\u001b[0m new_data \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mconvert_to_tensor(new_data, dtype\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mfloat32)\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# Perform a forward pass and obtain the logits\u001b[39;00m\n\u001b[0;32m---> 19\u001b[0m logits \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnew_data\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     21\u001b[0m \u001b[38;5;66;03m# Since the last layer uses softmax, the output will be the probabilities\u001b[39;00m\n\u001b[1;32m     22\u001b[0m probabilities \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mnn\u001b[38;5;241m.\u001b[39msoftmax(logits)\n","\u001b[0;31mTypeError\u001b[0m: '_UserObject' object is not callable"],"ename":"TypeError","evalue":"'_UserObject' object is not callable","output_type":"error"}]},{"cell_type":"code","source":"      # Create a directory if it is not there, so we can save files and results in it\nfrom pathlib import Path\nPath('/kaggle/working/main_folder').mkdir(parents=True, exist_ok=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T08:02:50.691332Z","iopub.execute_input":"2024-08-23T08:02:50.691891Z","iopub.status.idle":"2024-08-23T08:02:50.695994Z","shell.execute_reply.started":"2024-08-23T08:02:50.691856Z","shell.execute_reply":"2024-08-23T08:02:50.695265Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Replace 'your_file.xlsx' with the actual file path\nfile_path = '/content/try_pred.xlsx'\n\n# Read the XLSX file into a pandas DataFrame\ndfp = pd.read_excel(file_path,header=None)\n\ndfp","metadata":{"id":"YvyF8dejiBmI","outputId":"81ae5db6-1898-43b5-f829-26f85df0f896","execution":{"iopub.status.busy":"2024-08-23T05:37:31.284207Z","iopub.status.idle":"2024-08-23T05:37:31.284506Z","shell.execute_reply.started":"2024-08-23T05:37:31.284353Z","shell.execute_reply":"2024-08-23T05:37:31.284367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_in=dfp.iloc[:, :211]\npred_in = np.array(pred_in)","metadata":{"id":"ghpslQ2WjJ-g","execution":{"iopub.status.busy":"2024-08-23T05:37:31.285444Z","iopub.status.idle":"2024-08-23T05:37:31.285714Z","shell.execute_reply.started":"2024-08-23T05:37:31.285581Z","shell.execute_reply":"2024-08-23T05:37:31.285595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_in_scaled = scaler.transform(pred_in.reshape(-1, 1)).reshape(pred_in.shape)","metadata":{"id":"GLPqpZpzjj1B","execution":{"iopub.status.busy":"2024-08-23T05:37:31.286635Z","iopub.status.idle":"2024-08-23T05:37:31.286911Z","shell.execute_reply.started":"2024-08-23T05:37:31.286775Z","shell.execute_reply":"2024-08-23T05:37:31.286789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test.shape","metadata":{"id":"2HaUkx5Cw2EF","outputId":"f11dfd69-6421-4897-833c-8cc9fc32173b","execution":{"iopub.status.busy":"2024-08-23T05:37:31.288053Z","iopub.status.idle":"2024-08-23T05:37:31.288384Z","shell.execute_reply.started":"2024-08-23T05:37:31.288209Z","shell.execute_reply":"2024-08-23T05:37:31.288240Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_in_scaled = np.reshape(pred_in_scaled,[pred_in_scaled.shape[0],pred_in_scaled.shape[1],1])\nlikelihood=model_vi.predict(pred_in_scaled)","metadata":{"id":"vYE0XtuMjamN","outputId":"c83bcde1-1669-47aa-fa41-243d63623a2b","execution":{"iopub.status.busy":"2024-08-23T05:37:31.289750Z","iopub.status.idle":"2024-08-23T05:37:31.290090Z","shell.execute_reply.started":"2024-08-23T05:37:31.289912Z","shell.execute_reply":"2024-08-23T05:37:31.289928Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_pd = np.count_nonzero(pred_in, axis=1)\npred_dec = np.max(pred_in, axis=1)","metadata":{"id":"k6ODlrwUz_RI","execution":{"iopub.status.busy":"2024-08-23T05:37:31.290967Z","iopub.status.idle":"2024-08-23T05:37:31.291265Z","shell.execute_reply.started":"2024-08-23T05:37:31.291103Z","shell.execute_reply":"2024-08-23T05:37:31.291117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_arrayRF= np.column_stack((pred_dec,pred_pd))","metadata":{"id":"ui_rAkgE049e","execution":{"iopub.status.busy":"2024-08-23T05:37:31.292076Z","iopub.status.idle":"2024-08-23T05:37:31.292359Z","shell.execute_reply.started":"2024-08-23T05:37:31.292220Z","shell.execute_reply":"2024-08-23T05:37:31.292234Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"id":"F1E27w761owo","outputId":"b6ece454-749a-4002-df02-530a7d139b9e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ab=clf.predict_proba(pred_arrayRF)","metadata":{"id":"vdX6NKSU0L4J","execution":{"iopub.status.busy":"2024-08-23T05:37:31.293507Z","iopub.status.idle":"2024-08-23T05:37:31.293781Z","shell.execute_reply.started":"2024-08-23T05:37:31.293644Z","shell.execute_reply":"2024-08-23T05:37:31.293658Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Original array with 4 values that sum up to 1\noriginal_array = np.array(ab)\n\n# Calculate the sum of the original array\noriginal_sum = np.sum(original_array)\n\n# Scale the array to sum up to 0.7\ndesired_sum = 0.6\npad=0.1\nscaled_array = (original_array / original_sum) * desired_sum\nscaled_array=scaled_array+pad\nprint(scaled_array)\nprint(np.sum(scaled_array))\n","metadata":{"id":"zNKGg6ta1Tbm","outputId":"222fbff2-dd96-4801-d07a-daccab19cdb2","execution":{"iopub.status.busy":"2024-08-23T05:37:31.294466Z","iopub.status.idle":"2024-08-23T05:37:31.294734Z","shell.execute_reply.started":"2024-08-23T05:37:31.294600Z","shell.execute_reply":"2024-08-23T05:37:31.294614Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"likelihood","metadata":{"id":"sjaD5Ku021nX","outputId":"ff1d66be-1eed-430f-a4c4-426dabc8b30a","execution":{"iopub.status.busy":"2024-08-23T05:37:31.295385Z","iopub.status.idle":"2024-08-23T05:37:31.295675Z","shell.execute_reply.started":"2024-08-23T05:37:31.295540Z","shell.execute_reply":"2024-08-23T05:37:31.295554Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Original array with 4 values that sum up to 1\noriginal_array2 = np.array(likelihood)\n\n# Calculate the sum of the original array\noriginal_sum2 = np.sum(original_array2)\n\n# Scale the array to sum up to 0.7\ndesired_sum2 = 0.6\npad2=0.1\nscaled_array2 = (original_array2 / original_sum2) * desired_sum2\nscaled_array2=scaled_array2+pad2\nprint(scaled_array2)\nprint(np.sum(scaled_array2))","metadata":{"id":"kfBf2PIb5SQT","outputId":"641fabcc-3ed9-44eb-c6f6-35c464b56ef2","execution":{"iopub.status.busy":"2024-08-23T05:37:31.296425Z","iopub.status.idle":"2024-08-23T05:37:31.296735Z","shell.execute_reply.started":"2024-08-23T05:37:31.296578Z","shell.execute_reply":"2024-08-23T05:37:31.296594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"post=((scaled_array)*scaled_array2)","metadata":{"id":"-u1uilkw1_YY","execution":{"iopub.status.busy":"2024-08-23T05:37:31.297510Z","iopub.status.idle":"2024-08-23T05:37:31.297787Z","shell.execute_reply.started":"2024-08-23T05:37:31.297649Z","shell.execute_reply":"2024-08-23T05:37:31.297663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.sum(post)","metadata":{"id":"BCUChv014win","outputId":"a2e17f57-7097-45c0-d326-a5a71b9fbaeb","execution":{"iopub.status.busy":"2024-08-23T05:37:31.298772Z","iopub.status.idle":"2024-08-23T05:37:31.299088Z","shell.execute_reply.started":"2024-08-23T05:37:31.298929Z","shell.execute_reply":"2024-08-23T05:37:31.298945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"post/np.sum(post)","metadata":{"id":"aBzVKuBY5o7q","outputId":"ca51afe0-db32-4ced-ec84-571f16768c17","execution":{"iopub.status.busy":"2024-08-23T05:37:31.299854Z","iopub.status.idle":"2024-08-23T05:37:31.300161Z","shell.execute_reply.started":"2024-08-23T05:37:31.300007Z","shell.execute_reply":"2024-08-23T05:37:31.300023Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categories = ['Category A', 'Category B', 'Category C', 'Category D']\nplt.bar(categories,np.squeeze(post/np.sum(post)))","metadata":{"id":"P7YC-Yu92dXa","outputId":"0a01f640-411a-4211-cbcd-f997a1ccd4e7","execution":{"iopub.status.busy":"2024-08-23T05:37:31.300853Z","iopub.status.idle":"2024-08-23T05:37:31.301121Z","shell.execute_reply.started":"2024-08-23T05:37:31.300989Z","shell.execute_reply":"2024-08-23T05:37:31.301003Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.bar(categories,np.squeeze(scaled_array))\nplt.bar(categories,np.squeeze(scaled_array2))","metadata":{"id":"plxTMTgl3tZo","outputId":"594f7ef7-94ef-4dff-ad62-8b205b7c391b","execution":{"iopub.status.busy":"2024-08-23T05:37:31.302169Z","iopub.status.idle":"2024-08-23T05:37:31.302461Z","shell.execute_reply.started":"2024-08-23T05:37:31.302310Z","shell.execute_reply":"2024-08-23T05:37:31.302323Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"id":"ezsbXACB35N0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming X_test is an array containing your test data\nn = 0  # Index of the specific data point you want to plot\n\n# Find the index of the maximum value\nmax_index = np.argmax(X_test[n])\n\n# Find the index where the values become zero after the maximum value\nzero_index = np.where(X_test[n][max_index:] == 0)[0]\nif zero_index.size > 0:\n    zero_index = zero_index[0] + max_index\nelse:\n    zero_index = len(X_test[n])\n\n# Trim the array from the maximum value up to the zero_index\ntrimmed_X_test = X_test[n][max_index:zero_index]\n\n# Create the plot\nplt.plot(trimmed_X_test, range(len(trimmed_X_test)))\n\n# Set labels for the plot\nplt.xlabel('Value')\nplt.ylabel('Index')\n\n# Display the plot\nplt.show()","metadata":{"id":"mu2CZXY2rNJS","outputId":"72244410-a55a-4fe4-ce0e-0d051f6112f2","execution":{"iopub.status.busy":"2024-08-23T05:37:31.303446Z","iopub.status.idle":"2024-08-23T05:37:31.303724Z","shell.execute_reply.started":"2024-08-23T05:37:31.303584Z","shell.execute_reply":"2024-08-23T05:37:31.303598Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for n in range(68):\n  ss =[]\n  # n= int(input())\n\n  classes = ['Class 1','Class 2','Class 3','Class 4']\n  c = [1,2,3,4]\n  plt.figure()\n  fig, ax = plt.subplots(1,2)\n\n  for i in range(0,30):\n    s = model_vi.predict(X_test[n:n+1],verbose = 1)\n    ss.append(s)\n    ax[1].scatter(c,s,c=\"blue\",alpha=0.1)\n\n  sss = pd.DataFrame(np.squeeze(ss))\n  ax[1].boxplot(sss)\n  ax[1].set_xticklabels(classes)\n  ax[1].text(1.8, -0.25, 'Actual Result: Class '+str(y_test[n]+1), color='red')\n\n\n  max_index = np.argmax(X_test[n])\n\n  # Find the index where the values become zero after the maximum value\n  zr = np.where(X_test[n]==0)\n  zr = np.squeeze(zr)\n  zero_index=np.min(zr[zr>max_index])+1\n\n  # Trim the array from the maximum value up to the zero_index\n  trimmed_X_test = X_test[n][0:zero_index]\n\n  ax[0].plot(np.max(X)*trimmed_X_test.flatten(),range(len(trimmed_X_test.flatten())))\n  ax[0].invert_yaxis()\n  print(y_test[n])","metadata":{"id":"gYUaIog3ENnf","outputId":"bde852f5-28f7-403e-a059-37723b625c91","execution":{"iopub.status.busy":"2024-08-23T05:37:31.304518Z","iopub.status.idle":"2024-08-23T05:37:31.304791Z","shell.execute_reply.started":"2024-08-23T05:37:31.304657Z","shell.execute_reply":"2024-08-23T05:37:31.304671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_test.shape)\nX2= np.reshape(X_train,[362,211,1])","metadata":{"id":"axAar60hvmRL","outputId":"fb68a029-2e0a-43e5-98bd-a4bc28062d31","execution":{"iopub.status.busy":"2024-08-23T05:37:31.305477Z","iopub.status.idle":"2024-08-23T05:37:31.305746Z","shell.execute_reply.started":"2024-08-23T05:37:31.305611Z","shell.execute_reply":"2024-08-23T05:37:31.305625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"N = [0,3,14]\nfor n in N:\n  ss =[]\n  # n= int(input())\n\n  classes = ['Class 1','Class 2','Class 3','Class 4']\n  c = [1,2,3,4]\n  plt.figure()\n  fig, ax = plt.subplots(1,2)\n\n  for i in range(0,30):\n    s = model_vi.predict(X2[n:n+1],verbose = 1)\n    ss.append(s)\n    ax[1].scatter(c,s,c=\"blue\",alpha=0.1)\n\n  sss = pd.DataFrame(np.squeeze(ss))\n  ax[1].boxplot(sss)\n  ax[1].set_xticklabels(classes)\n  ax[1].text(1.8, -0.25, 'Actual Result: Class '+str(y_train[n]+1), color='red')\n\n\n  max_index = np.argmax(X_train[n])\n\n  # Find the index where the values become zero after the maximum value\n  zr = np.where(X_train[n]==0)\n  zr = np.squeeze(zr)\n  zero_index=np.min(zr[zr>max_index])+1\n\n  # Trim the array from the maximum value up to the zero_index\n  trimmed_X_test = X_train[n][0:zero_index]\n\n  ax[0].plot(np.max(X)*trimmed_X_test.flatten(),range(len(trimmed_X_test.flatten())))\n  ax[0].invert_yaxis()\n  print(y_train[n])","metadata":{"id":"PpRLarjyrPpE","outputId":"9859e6e6-2629-452e-f9f6-b148b2969f30","execution":{"iopub.status.busy":"2024-08-23T05:37:31.306546Z","iopub.status.idle":"2024-08-23T05:37:31.306822Z","shell.execute_reply.started":"2024-08-23T05:37:31.306686Z","shell.execute_reply":"2024-08-23T05:37:31.306699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"id":"U24rU5-FPzas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.style as style\n\n\nplt.rcParams['font.family'] = 'sans-serif'\nplt.style.use('classic')\nN = np.arange(0,68,1)\n# N =[0]\nfor n in N:\n  ss =[]\n  # n= int(input())\n\n  classes = ['Class 1','Class 2','Class 3','Class 4']\n  c = [1,2,3,4]\n  plt.figure()\n  fig, ax = plt.subplots(1,2)\n\n  for i in range(0,30):\n    s = model_vi.predict(X_test[n:n+1],verbose = 0)\n    ss.append(s)\n    ax[1].scatter(c,s,c=\"blue\",alpha=0.1)\n\n  sss = pd.DataFrame(np.squeeze(ss))\n  ax[1].boxplot(sss)\n  # ax[1].set_xticklabels(classes)\n  ax[1].text(1.8, -0.3, 'Actual Result: Class '+str(y_test[n]+1), color='red')\n  ax[1].set_title('Uncertainty Estimation')\n  ax[1].set_ylabel('Probability of Obtaining a Class')\n  ax[1].set_xlabel('Class No.')\n  plt.ylim(-0.1,1)\n\n\n  max_index = np.argmax(X_test[n])\n\n  # Find the index where the values become zero after the maximum value\n  zr = np.where(X_test[n]==0)\n  zr = np.squeeze(zr)\n  zero_index=np.min(zr[zr>max_index])+1\n\n  # Trim the array from the maximum value up to the zero_index\n  trimmed_X_test = X_test[n][0:zero_index]\n\n  ax[0].plot(np.max(X)*trimmed_X_test.flatten(),range(len(trimmed_X_test.flatten())))\n  ax[0].invert_yaxis()\n  ax[0].set_xlabel('Deceleration [g]')\n  ax[0].set_ylabel('Penetration Depth [cm]')\n  ax[0].set_title('Deceleration Curve')\n  plt.tight_layout()\n  # sp='/content/drive/MyDrive/Journal Paper 1'+str(n)+'.png'\n  # fig.savefig(sp,dpi=300,bbox_inches='tight',facecolor='w')\n\n  print(y_test[n])","metadata":{"id":"kQGIgfEYsy34","outputId":"cf050de8-80df-434e-c70d-73b00393b15f","execution":{"iopub.status.busy":"2024-08-23T05:37:31.307616Z","iopub.status.idle":"2024-08-23T05:37:31.307893Z","shell.execute_reply.started":"2024-08-23T05:37:31.307750Z","shell.execute_reply":"2024-08-23T05:37:31.307763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nmodel_vi.save(\"/content/drive/MyDrive/Journal Paper 1/my_saved_model\")\n","metadata":{"id":"wkEa-9SN3IML","outputId":"987ecf81-9a2d-418c-bbb2-c1e64722d9f9","execution":{"iopub.status.busy":"2024-08-23T05:37:31.308546Z","iopub.status.idle":"2024-08-23T05:37:31.308859Z","shell.execute_reply.started":"2024-08-23T05:37:31.308702Z","shell.execute_reply":"2024-08-23T05:37:31.308717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_vi.save(\"/content/drive/MyDrive/Journal Paper 1/my_saved_model.h5\")","metadata":{"id":"HVKs80g5ZFyI","execution":{"iopub.status.busy":"2024-08-23T05:37:31.310336Z","iopub.status.idle":"2024-08-23T05:37:31.310637Z","shell.execute_reply.started":"2024-08-23T05:37:31.310486Z","shell.execute_reply":"2024-08-23T05:37:31.310500Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the saved model\nloaded_model = tf.keras.models.load_model(\"/content/drive/MyDrive/Journal Paper 1/my_saved_model\")\n\n# Use the loaded model for prediction\npredictions = loaded_model.predict(X_test[0:1])\n","metadata":{"id":"_25QQH1KZQR-","outputId":"7d32ae72-92c4-4509-993d-149d168d3a32","execution":{"iopub.status.busy":"2024-08-23T05:37:31.311536Z","iopub.status.idle":"2024-08-23T05:37:31.311820Z","shell.execute_reply.started":"2024-08-23T05:37:31.311681Z","shell.execute_reply":"2024-08-23T05:37:31.311694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"id":"781BvL29Zudv","outputId":"16bd898b-ada2-4e5d-db37-b27bfb4702ea","execution":{"iopub.status.busy":"2024-08-23T05:37:31.312581Z","iopub.status.idle":"2024-08-23T05:37:31.312857Z","shell.execute_reply.started":"2024-08-23T05:37:31.312722Z","shell.execute_reply":"2024-08-23T05:37:31.312736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\ny_pred = model_vi.predict(X_test)\ncm = confusion_matrix(y_test, y_pred_labels)","metadata":{"id":"tDHIJxVeLDnP","execution":{"iopub.status.busy":"2024-08-23T05:37:31.313789Z","iopub.status.idle":"2024-08-23T05:37:31.314063Z","shell.execute_reply.started":"2024-08-23T05:37:31.313924Z","shell.execute_reply":"2024-08-23T05:37:31.313938Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_labels","metadata":{"id":"9pHNdPoQBeQ9","outputId":"1420be58-aeac-4ff0-aba7-e00c69eabcb2","execution":{"iopub.status.busy":"2024-08-23T05:37:31.314873Z","iopub.status.idle":"2024-08-23T05:37:31.315152Z","shell.execute_reply.started":"2024-08-23T05:37:31.315010Z","shell.execute_reply":"2024-08-23T05:37:31.315024Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compute the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred_labels)\n\n# Define the class labels\nclass_labels = np.unique(y_test)\nC = ['Class 1', 'Class 2', 'Class 3', 'Class 4']\n# Plot the confusion matrix\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\nplt.title('Confusion Matrix')\n\ntick_marks = np.arange(len(class_labels))\nplt.xticks(tick_marks, C)\nplt.yticks(tick_marks, C)\n\n# Add labels to each cell in the confusion matrix\nthresh = cm.max() / 2\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        plt.text(j, i, format(cm[i, j], 'd'), ha=\"center\", va=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.tight_layout()\nplt.show()\n","metadata":{"id":"N-4POamN1wZG","outputId":"6a9fb3f1-df29-4530-ee32-644c73d6eb46","execution":{"iopub.status.busy":"2024-08-23T05:37:31.316004Z","iopub.status.idle":"2024-08-23T05:37:31.316330Z","shell.execute_reply.started":"2024-08-23T05:37:31.316179Z","shell.execute_reply":"2024-08-23T05:37:31.316198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Save the training dataset as a NumPy array.\nnp.save('X_test.npy', X_test)\n\n# Save the testing dataset as a NumPy array.\nnp.save('y_test.npy', y_test)\n\n# Save the training dataset as a NumPy array.\nnp.save('X_train.npy', X2)\n\n# Save the testing dataset as a NumPy array.\nnp.save('y_train.npy', y_train)","metadata":{"id":"rWk0bIRZ2hOK","execution":{"iopub.status.busy":"2024-08-23T05:37:31.317173Z","iopub.status.idle":"2024-08-23T05:37:31.317502Z","shell.execute_reply.started":"2024-08-23T05:37:31.317345Z","shell.execute_reply":"2024-08-23T05:37:31.317359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_vi.save(\"/content/drive/MyDrive/Journal Paper 1/my_saved_model2\")","metadata":{"id":"Y0hEJojQbgeF","outputId":"1567e290-7ae0-4547-e7b8-361e89576f97","execution":{"iopub.status.busy":"2024-08-23T05:37:31.318380Z","iopub.status.idle":"2024-08-23T05:37:31.318709Z","shell.execute_reply.started":"2024-08-23T05:37:31.318550Z","shell.execute_reply":"2024-08-23T05:37:31.318566Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test.shape","metadata":{"id":"NP7PQ4g-3GsG","outputId":"0db2951e-827b-4738-df0b-ad9e8b7f5f1e","execution":{"iopub.status.busy":"2024-08-23T05:37:31.319688Z","iopub.status.idle":"2024-08-23T05:37:31.320022Z","shell.execute_reply.started":"2024-08-23T05:37:31.319849Z","shell.execute_reply":"2024-08-23T05:37:31.319865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# using loadtxt()\narr = pd.read_csv(\"/content/sydney_pred.csv\", header=None)\n\nSydTest = np.array(arr)\n","metadata":{"id":"ThTNSnDPbsY4","execution":{"iopub.status.busy":"2024-08-23T05:37:31.321064Z","iopub.status.idle":"2024-08-23T05:37:31.321349Z","shell.execute_reply.started":"2024-08-23T05:37:31.321207Z","shell.execute_reply":"2024-08-23T05:37:31.321221Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sddd=np.reshape(SydTest,[3,211,1])","metadata":{"id":"gjia7yE4q7IX","execution":{"iopub.status.busy":"2024-08-23T05:37:31.322461Z","iopub.status.idle":"2024-08-23T05:37:31.322739Z","shell.execute_reply.started":"2024-08-23T05:37:31.322596Z","shell.execute_reply":"2024-08-23T05:37:31.322609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sddd.shape","metadata":{"id":"__2nj0XQrXJ2","outputId":"a6c21f73-a9e9-4646-f94f-e5cb84094a88","execution":{"iopub.status.busy":"2024-08-23T05:37:31.323536Z","iopub.status.idle":"2024-08-23T05:37:31.323813Z","shell.execute_reply.started":"2024-08-23T05:37:31.323680Z","shell.execute_reply":"2024-08-23T05:37:31.323694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.style as style\n\n\nplt.rcParams['font.family'] = 'sans-serif'\nplt.style.use('classic')\nN = np.arange(0,3,1)\n# N =[0]\nfor n in N:\n  ss =[]\n  # n= int(input())\n\n  classes = ['Class 1','Class 2','Class 3','Class 4']\n  c = [1,2,3,4]\n  plt.figure()\n  fig, ax = plt.subplots()\n\n  for i in range(0,30):\n    s = model_vi.predict(sddd[n:n+1],verbose = 0)\n    ss.append(s)\n    ax.scatter(c,s,c=\"blue\",alpha=0.1)\n\n  sss = pd.DataFrame(np.squeeze(ss))\n  ax.boxplot(sss)\n  # ax[1].set_xticklabels(classes)\n  # ax[1].text(1.8, -0.3, 'Actual Result: Class '+str(y_test[n]+1), color='red')\n  ax.set_title('Uncertainty Estimation')\n  ax.set_ylabel('Probability of Obtaining a Class')\n  ax.set_xlabel('Class No.')\n  plt.ylim(-0.1,1)\n\n\n  # max_index = np.argmax(sddd[n])\n\n  # # Find the index where the values become zero after the maximum value\n  # zr = np.where(sddd[n]==0)\n  # zr = np.squeeze(zr)\n  # zero_index=np.min(zr[zr>max_index])+1\n\n  # # Trim the array from the maximum value up to the zero_index\n  # trimmed_X_test = sddd[n][0:zero_index]\n\n  # ax[0].plot(np.max(X)*trimmed_X_test.flatten(),range(len(trimmed_X_test.flatten())))\n  # ax[0].invert_yaxis()\n  # ax[0].set_xlabel('Deceleration [g]')\n  # ax[0].set_ylabel('Penetration Depth [cm]')\n  # ax[0].set_title('Deceleration Curve')\n  # plt.tight_layout()\n  # sp='/content/drive/MyDrive/Journal Paper 1'+str(n)+'.png'\n  # fig.savefig(sp,dpi=300,bbox_inches='tight',facecolor='w')\n\n  print(y_test[n])","metadata":{"id":"OQPpe3RqrhFw","outputId":"9b47d6d0-5287-473f-e7bc-e04c55818c2e","execution":{"iopub.status.busy":"2024-08-23T05:37:31.324645Z","iopub.status.idle":"2024-08-23T05:37:31.324916Z","shell.execute_reply.started":"2024-08-23T05:37:31.324780Z","shell.execute_reply":"2024-08-23T05:37:31.324793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_vi.predict(sddd[0:1],verbose = 0)","metadata":{"id":"Y9QLPOpasyMo","outputId":"540504d7-de38-4214-b3ae-a95314bfb463","execution":{"iopub.status.busy":"2024-08-23T05:37:31.325618Z","iopub.status.idle":"2024-08-23T05:37:31.325890Z","shell.execute_reply.started":"2024-08-23T05:37:31.325757Z","shell.execute_reply":"2024-08-23T05:37:31.325770Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0, 1))\nsd_scaled = scaler.fit_transform(SydTest.reshape(-1, 1)).reshape(SydTest.shape)","metadata":{"id":"QkhaeQRFttK0","execution":{"iopub.status.busy":"2024-08-23T05:37:31.326661Z","iopub.status.idle":"2024-08-23T05:37:31.326944Z","shell.execute_reply.started":"2024-08-23T05:37:31.326802Z","shell.execute_reply":"2024-08-23T05:37:31.326816Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sddd=np.reshape(sd_scaled,[3,211,1])","metadata":{"id":"8W2XUq1nvVme","execution":{"iopub.status.busy":"2024-08-23T05:37:31.328057Z","iopub.status.idle":"2024-08-23T05:37:31.328414Z","shell.execute_reply.started":"2024-08-23T05:37:31.328251Z","shell.execute_reply":"2024-08-23T05:37:31.328267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.shape\n","metadata":{"id":"keX1cF_zwsZc","outputId":"800d026a-7149-497e-fe60-ae85453e64a7","execution":{"iopub.status.busy":"2024-08-23T05:37:31.330232Z","iopub.status.idle":"2024-08-23T05:37:31.330676Z","shell.execute_reply.started":"2024-08-23T05:37:31.330511Z","shell.execute_reply":"2024-08-23T05:37:31.330529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sdl=np.reshape(SydTest,[3,211])","metadata":{"id":"OR-eg015xmeN","execution":{"iopub.status.busy":"2024-08-23T05:37:31.332049Z","iopub.status.idle":"2024-08-23T05:37:31.332387Z","shell.execute_reply.started":"2024-08-23T05:37:31.332219Z","shell.execute_reply":"2024-08-23T05:37:31.332234Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sdl.shape","metadata":{"id":"4UhkTXV7xt6y","outputId":"a1716e9f-2955-42f9-f559-320a3a1846ff","execution":{"iopub.status.busy":"2024-08-23T05:37:31.333174Z","iopub.status.idle":"2024-08-23T05:37:31.333492Z","shell.execute_reply.started":"2024-08-23T05:37:31.333323Z","shell.execute_reply":"2024-08-23T05:37:31.333343Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"id":"qi6Ib2R0yN-h","outputId":"94fcbd40-4184-451d-ee8b-665caa0abb27"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sdplusx= np.vstack((X,sdl))","metadata":{"id":"2n1mfDwKx8jT","execution":{"iopub.status.busy":"2024-08-23T05:37:31.334365Z","iopub.status.idle":"2024-08-23T05:37:31.334696Z","shell.execute_reply.started":"2024-08-23T05:37:31.334530Z","shell.execute_reply":"2024-08-23T05:37:31.334545Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0, 1))\nsd_scaled = scaler.fit_transform(sdplusx.reshape(-1, 1)).reshape(sdplusx.shape)","metadata":{"id":"LehcNF1Ayj87","execution":{"iopub.status.busy":"2024-08-23T05:37:31.335554Z","iopub.status.idle":"2024-08-23T05:37:31.335845Z","shell.execute_reply.started":"2024-08-23T05:37:31.335698Z","shell.execute_reply":"2024-08-23T05:37:31.335713Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sddd=np.reshape(sd_scaled,[452,211,1])","metadata":{"id":"AZJJ_eK9yoBh","execution":{"iopub.status.busy":"2024-08-23T05:37:31.336735Z","iopub.status.idle":"2024-08-23T05:37:31.337056Z","shell.execute_reply.started":"2024-08-23T05:37:31.336902Z","shell.execute_reply":"2024-08-23T05:37:31.336918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sddd[449:450]","metadata":{"id":"ss-IUZd0y9G_","outputId":"d15df8eb-6a41-4606-8ab1-d6eec6b7ce82","execution":{"iopub.status.busy":"2024-08-23T05:37:31.338030Z","iopub.status.idle":"2024-08-23T05:37:31.338371Z","shell.execute_reply.started":"2024-08-23T05:37:31.338203Z","shell.execute_reply":"2024-08-23T05:37:31.338220Z"},"trusted":true},"execution_count":null,"outputs":[]}]}